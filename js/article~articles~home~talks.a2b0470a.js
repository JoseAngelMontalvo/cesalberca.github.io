(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["article~articles~home~talks"],{"1af6":function(e,t,r){var o=r("63b6");o(o.S,"Array",{isArray:r("9003")})},"1c4c":function(e,t,r){"use strict";var o=r("9b43"),n=r("5ca1"),a=r("4bf8"),s=r("1fa8"),i=r("33a4"),c=r("9def"),l=r("f1ae"),d=r("27ee");n(n.S+n.F*!r("5cc5")(function(e){Array.from(e)}),"Array",{from:function(e){var t,r,n,u,m=a(e),p="function"==typeof this?this:Array,v=arguments.length,h=v>1?arguments[1]:void 0,f=void 0!==h,g=0,_=d(m);if(f&&(h=o(h,v>2?arguments[2]:void 0,2)),void 0==_||p==Array&&i(_))for(t=c(m.length),r=new p(t);t>g;g++)l(r,g,f?h(m[g],g):m[g]);else for(u=_.call(m),r=new p;!(n=u.next()).done;g++)l(r,g,f?s(u,h,[n.value,g],!0):n.value);return r.length=g,r}})},"20fd":function(e,t,r){"use strict";var o=r("d9f6"),n=r("aebd");e.exports=function(e,t,r){t in e?o.f(e,t,n(0,r)):e[t]=r}},"24c5":function(e,t,r){"use strict";var o,n,a,s,i=r("b8e3"),c=r("e53d"),l=r("d864"),d=r("40c3"),u=r("63b6"),m=r("f772"),p=r("79aa"),v=r("1173"),h=r("a22a"),f=r("f201"),g=r("4178").set,_=r("aba2")(),y=r("656e"),w=r("4439"),b=r("bc13"),C=r("cd78"),x="Promise",k=c.TypeError,A=c.process,T=A&&A.versions,L=T&&T.v8||"",R=c[x],S="process"==d(A),I=function(){},F=n=y.f,E=!!function(){try{var e=R.resolve(1),t=(e.constructor={})[r("5168")("species")]=function(e){e(I,I)};return(S||"function"==typeof PromiseRejectionEvent)&&e.then(I)instanceof t&&0!==L.indexOf("6.6")&&-1===b.indexOf("Chrome/66")}catch(o){}}(),O=function(e){var t;return!(!m(e)||"function"!=typeof(t=e.then))&&t},D=function(e,t){if(!e._n){e._n=!0;var r=e._c;_(function(){var o=e._v,n=1==e._s,a=0,s=function(t){var r,a,s,i=n?t.ok:t.fail,c=t.resolve,l=t.reject,d=t.domain;try{i?(n||(2==e._h&&U(e),e._h=1),!0===i?r=o:(d&&d.enter(),r=i(o),d&&(d.exit(),s=!0)),r===t.promise?l(k("Promise-chain cycle")):(a=O(r))?a.call(r,c,l):c(r)):l(o)}catch(u){d&&!s&&d.exit(),l(u)}};while(r.length>a)s(r[a++]);e._c=[],e._n=!1,t&&!e._h&&j(e)})}},j=function(e){g.call(c,function(){var t,r,o,n=e._v,a=P(e);if(a&&(t=w(function(){S?A.emit("unhandledRejection",n,e):(r=c.onunhandledrejection)?r({promise:e,reason:n}):(o=c.console)&&o.error&&o.error("Unhandled promise rejection",n)}),e._h=S||P(e)?2:1),e._a=void 0,a&&t.e)throw t.v})},P=function(e){return 1!==e._h&&0===(e._a||e._c).length},U=function(e){g.call(c,function(){var t;S?A.emit("rejectionHandled",e):(t=c.onrejectionhandled)&&t({promise:e,reason:e._v})})},q=function(e){var t=this;t._d||(t._d=!0,t=t._w||t,t._v=e,t._s=2,t._a||(t._a=t._c.slice()),D(t,!0))},W=function(e){var t,r=this;if(!r._d){r._d=!0,r=r._w||r;try{if(r===e)throw k("Promise can't be resolved itself");(t=O(e))?_(function(){var o={_w:r,_d:!1};try{t.call(e,l(W,o,1),l(q,o,1))}catch(n){q.call(o,n)}}):(r._v=e,r._s=1,D(r,!1))}catch(o){q.call({_w:r,_d:!1},o)}}};E||(R=function(e){v(this,R,x,"_h"),p(e),o.call(this);try{e(l(W,this,1),l(q,this,1))}catch(t){q.call(this,t)}},o=function(e){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1},o.prototype=r("5c95")(R.prototype,{then:function(e,t){var r=F(f(this,R));return r.ok="function"!=typeof e||e,r.fail="function"==typeof t&&t,r.domain=S?A.domain:void 0,this._c.push(r),this._a&&this._a.push(r),this._s&&D(this,!1),r.promise},catch:function(e){return this.then(void 0,e)}}),a=function(){var e=new o;this.promise=e,this.resolve=l(W,e,1),this.reject=l(q,e,1)},y.f=F=function(e){return e===R||e===s?new a(e):n(e)}),u(u.G+u.W+u.F*!E,{Promise:R}),r("45f2")(R,x),r("4c95")(x),s=r("584a")[x],u(u.S+u.F*!E,x,{reject:function(e){var t=F(this),r=t.reject;return r(e),t.promise}}),u(u.S+u.F*(i||!E),x,{resolve:function(e){return C(i&&this===s?R:this,e)}}),u(u.S+u.F*!(E&&r("4ee1")(function(e){R.all(e)["catch"](I)})),x,{all:function(e){var t=this,r=F(t),o=r.resolve,n=r.reject,a=w(function(){var r=[],a=0,s=1;h(e,!1,function(e){var i=a++,c=!1;r.push(void 0),s++,t.resolve(e).then(function(e){c||(c=!0,r[i]=e,--s||o(r))},n)}),--s||o(r)});return a.e&&n(a.v),r.promise},race:function(e){var t=this,r=F(t),o=r.reject,n=w(function(){h(e,!1,function(e){t.resolve(e).then(r.resolve,o)})});return n.e&&o(n.v),r.promise}})},"2b3a":function(e,t){e.exports={body:"Vue seems to be the framework of the moment but... ¿how easy is to do testing, dependency injection, separation of concerns, compositions and so many other good practices? In this talk we'll see how we can take advantage of Vue in order to make our Software more robust, easy to test and easy to mantain.\n",html:"<p>Vue seems to be the framework of the moment but... ¿how easy is to do testing, dependency injection, separation of concerns, compositions and so many other good practices? In this talk we'll see how we can take advantage of Vue in order to make our Software more robust, easy to test and easy to mantain.</p>\n",attributes:{title:"Good Practices with Vue",length:40,difficulty:"Intermediate",language:"en",topics:["Vue","JavaScript","TypeScript"]},vue:{render:"return function render() { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0) }",staticRenderFns:"return [function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"dynamicContent\"},[_c('p',[_vm._v(\"Vue seems to be the framework of the moment but... ¿how easy is to do testing, dependency injection, separation of concerns, compositions and so many other good practices? In this talk we'll see how we can take advantage of Vue in order to make our Software more robust, easy to test and easy to mantain.\")])]) }]",component:{data:function(){return{templateRender:null}},render:function(e){return this.templateRender?this.templateRender():e("div","Rendering")},created:function(){this.templateRender=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},this.$options.staticRenderFns=[function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"dynamicContent"},[r("p",[e._v("Vue seems to be the framework of the moment but... ¿how easy is to do testing, dependency injection, separation of concerns, compositions and so many other good practices? In this talk we'll see how we can take advantage of Vue in order to make our Software more robust, easy to test and easy to mantain.")])])}]}}}}},"2f21":function(e,t,r){"use strict";var o=r("79e5");e.exports=function(e,t){return!!e&&o(function(){t?e.call(null,function(){},1):e.call(null)})}},"309a":function(e,t,r){"use strict";r.d(t,"a",function(){return i});var o=r("d225"),n=r("b0b4"),a=r("f798"),s=r("c655"),i=function(){function e(){Object(o["a"])(this,e)}return Object(n["a"])(e,[{key:"toDifficulty",value:function(e){switch(e){case"Advanced":return s["a"].ADVANCED;case"Intermediate":return s["a"].INTERMEDIATE;case"Beginner":return s["a"].EASY;default:throw new a["b"]("String ".concat(e," could not be mapped to a difficulty"))}}},{key:"toString",value:function(e){switch(e){case s["a"].ADVANCED:return"talks_talkDifficultyAdvanced";case s["a"].INTERMEDIATE:return"talks_talkDifficultyIntermediate";case s["a"].EASY:return"talks_talkDifficultyEasy"}}}],[{key:"create",value:function(){return new e}}]),e}()},3846:function(e,t,r){r("9e1e")&&"g"!=/./g.flags&&r("86cc").f(RegExp.prototype,"flags",{configurable:!0,get:r("0bfb")})},3886:function(e,t,r){var o={"./abstract-dark-design.jpg":"41b7","./art-artistic-canvas.jpg":"5e5b"};function n(e){var t=a(e);return r(t)}function a(e){var t=o[e];if(!(t+1)){var r=new Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}return t}n.keys=function(){return Object.keys(o)},n.resolve=a,e.exports=n,n.id="3886"},"391e":function(e,t){e.exports={body:"Casos de Uso y comandos. Cómo.\n\n\x3c!--more--\x3e\n\nEl [patrón comando](https://sourcemaking.com/design_patterns/command) nos ayuda a encapsular peticiones para realizar ciertas operaciones como logs, colas y filtrado.\n\nComenzamos con la interfaz:\n\n```typescript\nexport interface Command<T> {\n    execute(): Promise<T>\n}\n```\n\nAhora podremos ver un comando específico, por ejemplo el que se usa para cargar este mismo artículo.\n\n```typescript\nimport { Command } from '../../infraestructure/Command'\nimport { Article, ArticlesRepository } from '../../domain/articles'\nimport { Id } from '../../domain'\nimport { Locale, Translator } from '../../domain/language'\nimport { ArticlesFileRepository } from '../../infraestructure/articles/ArticlesFileRepository'\nimport { FileLoader } from '../../infraestructure/FileLoader'\nimport { TranslationService } from '../../domain/TranslationService'\n\nexport class GetArticle implements Command<Article> {\n    private constructor(\n        private readonly articlesRepository: ArticlesRepository,\n        private readonly id: Id,\n        private readonly locale: Locale\n    ) {}\n\n    public async execute(): Promise<Article> {\n        return this.articlesRepository.findOneByLocale(this.id, this.locale)\n    }\n\n    public static create(context: { id: Id; locale: Locale }) {\n        return new GetArticle(\n            new ArticlesFileRepository(\n                FileLoader.create(),\n                TranslationService.create(Translator.create())\n            ),\n            context.id,\n            context.locale\n        )\n    }\n}\n```\n\nEste comando es responsable de obtener cierto artículo usando un [repositorio](http://shawnmc.cool/the-repository-pattern), dónde y cómo lo haga es algo que no nos acontece a nosotros, ya que es responsabilidad de otra clase.\n\nEl comando representa un [Caso de Uso](https://en.wikipedia.org/wiki/Use_case) de mi aplicación. Ahora mismo solamente necesito recoger el artículo del repositorio pero podría desarrollar una nueva funcionalidad donde se podría gestionar el si el usuario ha leído el artículo ya o si el usuario es PRO y por tanto puede leer todos los artículos en vez de unos pocos.\n\n¿Quién construye el comando? Pues quien lo use:\n\n```typescript\nconst article = await GetArticle.create({\n    id: 'use-cases-and-commands',\n    locale: Locale.EN\n}).execute()\n```\n\nEstoy usando [inversion de control](https://en.wikipedia.org/wiki/Inversion_of_control) para proveer de las dependencias necesarias para que el case de uso GetArticle funcione. Esto lo hago mediante un función constructura (si fuese muy complejo construir este caso de uso nos crearíamos una [factoría](https://sourcemaking.com/design_patterns/factory_method)):\n\n```typescript\npublic static create(context: { id: Id; locale: Locale }) {\n    return new GetArticle(\n        new ArticlesFileRepository(\n          FileLoader.create(),\n          TranslationService.create(Translator.create())\n        ),\n        context.id,\n        context.locale\n    )\n}\n```\n\nEn este caso estoy pasando de una abstracción (ArticlesRepository) a una concreción (ArticlesFileRepository). Si mañana decido que mis artículos vendrán via API únicamente tendré que cambiar el método factoría.\n\nLo que también es interesante de los comando es que son fáciles de extender. Por ejemplo podemos dejar una traza cada vez que un comando sea ejecutado usando el [patrón decorador](https://sourcemaking.com/design_patterns/decorator):\n\n```typescript\nimport { Command } from './Command'\nimport { Logger } from './Logger'\n\nexport class LoggerCommandDecorator<T> implements Command<T> {\n    public constructor(\n        private readonly decoratedCommand: Command<T>,\n        private readonly logger: Logger\n    ) {}\n\n    public execute(): Promise<T> {\n        this.logger.log(\n            (this.decoratedCommand as Object).constructor.name +\n                ' - ' +\n                Object.getOwnPropertyNames(this.decoratedCommand)\n        )\n        return this.decoratedCommand.execute()\n    }\n}\n```\n\nDespués, usando un `UserCaseDecorator` especifico qué decoradores quiero aplicar para **todos mis casos de uso**:\n\n```typescript\nimport { Command } from '../../infraestructure/Command'\nimport { LoggerCommandDecorator } from '../../infraestructure/LoggerCommandDecorator'\nimport { Logger } from '../../infraestructure/Logger'\n\nexport class UseCaseDecorator {\n    private static readonly logger = Logger.create({\n        // eslint-disable-next-line\n        stdout: { error: console.error, info: console.log, warn: console.warn }\n    })\n\n    public static decorate<T>(command: Command<T>) {\n        return new LoggerCommandDecorator<T>(command, UseCaseDecorator.logger)\n    }\n}\n```\n\nY después en cada Caso de Uso usamos el `UseCaseDecorator` de esta forma:\n\n```typescript\nimport { Command } from '../../infraestructure/Command'\nimport { Article, ArticlesRepository } from '../../domain/articles'\nimport { Id } from '../../domain'\nimport { Locale, Translator } from '../../domain/language'\nimport { UseCaseDecorator } from './UseCaseDecorator'\nimport { ArticlesFileRepository } from '../../infraestructure/articles/ArticlesFileRepository'\nimport { FileLoader } from '../../infraestructure/FileLoader'\nimport { TranslationService } from '../../domain/TranslationService'\n\nexport class GetArticle implements Command<Article> {\n    private constructor(\n        private readonly articlesRepository: ArticlesRepository,\n        private readonly id: Id,\n        private readonly locale: Locale\n    ) {}\n\n    public async execute(): Promise<Article> {\n        return this.articlesRepository.findOneByLocale(this.id, this.locale)\n    }\n\n    public static create(context: { id: Id; locale: Locale }) {\n        return UseCaseDecorator.decorate(\n            new GetArticle(\n                new ArticlesFileRepository(\n                    FileLoader.create(),\n                    TranslationService.create(Translator.create())\n                ),\n                context.id,\n                context.locale\n            )\n        )\n    }\n}\n```\n\nY podríamos crear todos los decaradores que se nos ocurran y usando composición podemos dar más y más comportamiento a nuestros comandos.\n",html:"<p>Casos de Uso y comandos. Cómo.</p>\n\x3c!--more--\x3e\n<p>El <a href=\"https://sourcemaking.com/design_patterns/command\">patrón comando</a> nos ayuda a encapsular peticiones para realizar ciertas operaciones como logs, colas y filtrado.</p>\n<p>Comenzamos con la interfaz:</p>\n<pre><code class=\"language-typescript\">export interface Command&lt;T&gt; {\n    execute(): Promise&lt;T&gt;\n}\n</code></pre>\n<p>Ahora podremos ver un comando específico, por ejemplo el que se usa para cargar este mismo artículo.</p>\n<pre><code class=\"language-typescript\">import { Command } from '../../infraestructure/Command'\nimport { Article, ArticlesRepository } from '../../domain/articles'\nimport { Id } from '../../domain'\nimport { Locale, Translator } from '../../domain/language'\nimport { ArticlesFileRepository } from '../../infraestructure/articles/ArticlesFileRepository'\nimport { FileLoader } from '../../infraestructure/FileLoader'\nimport { TranslationService } from '../../domain/TranslationService'\n\nexport class GetArticle implements Command&lt;Article&gt; {\n    private constructor(\n        private readonly articlesRepository: ArticlesRepository,\n        private readonly id: Id,\n        private readonly locale: Locale\n    ) {}\n\n    public async execute(): Promise&lt;Article&gt; {\n        return this.articlesRepository.findOneByLocale(this.id, this.locale)\n    }\n\n    public static create(context: { id: Id; locale: Locale }) {\n        return new GetArticle(\n            new ArticlesFileRepository(\n                FileLoader.create(),\n                TranslationService.create(Translator.create())\n            ),\n            context.id,\n            context.locale\n        )\n    }\n}\n</code></pre>\n<p>Este comando es responsable de obtener cierto artículo usando un <a href=\"http://shawnmc.cool/the-repository-pattern\">repositorio</a>, dónde y cómo lo haga es algo que no nos acontece a nosotros, ya que es responsabilidad de otra clase.</p>\n<p>El comando representa un <a href=\"https://en.wikipedia.org/wiki/Use_case\">Caso de Uso</a> de mi aplicación. Ahora mismo solamente necesito recoger el artículo del repositorio pero podría desarrollar una nueva funcionalidad donde se podría gestionar el si el usuario ha leído el artículo ya o si el usuario es PRO y por tanto puede leer todos los artículos en vez de unos pocos.</p>\n<p>¿Quién construye el comando? Pues quien lo use:</p>\n<pre><code class=\"language-typescript\">const article = await GetArticle.create({\n    id: 'use-cases-and-commands',\n    locale: Locale.EN\n}).execute()\n</code></pre>\n<p>Estoy usando <a href=\"https://en.wikipedia.org/wiki/Inversion_of_control\">inversion de control</a> para proveer de las dependencias necesarias para que el case de uso GetArticle funcione. Esto lo hago mediante un función constructura (si fuese muy complejo construir este caso de uso nos crearíamos una <a href=\"https://sourcemaking.com/design_patterns/factory_method\">factoría</a>):</p>\n<pre><code class=\"language-typescript\">public static create(context: { id: Id; locale: Locale }) {\n    return new GetArticle(\n        new ArticlesFileRepository(\n          FileLoader.create(),\n          TranslationService.create(Translator.create())\n        ),\n        context.id,\n        context.locale\n    )\n}\n</code></pre>\n<p>En este caso estoy pasando de una abstracción (ArticlesRepository) a una concreción (ArticlesFileRepository). Si mañana decido que mis artículos vendrán via API únicamente tendré que cambiar el método factoría.</p>\n<p>Lo que también es interesante de los comando es que son fáciles de extender. Por ejemplo podemos dejar una traza cada vez que un comando sea ejecutado usando el <a href=\"https://sourcemaking.com/design_patterns/decorator\">patrón decorador</a>:</p>\n<pre><code class=\"language-typescript\">import { Command } from './Command'\nimport { Logger } from './Logger'\n\nexport class LoggerCommandDecorator&lt;T&gt; implements Command&lt;T&gt; {\n    public constructor(\n        private readonly decoratedCommand: Command&lt;T&gt;,\n        private readonly logger: Logger\n    ) {}\n\n    public execute(): Promise&lt;T&gt; {\n        this.logger.log(\n            (this.decoratedCommand as Object).constructor.name +\n                ' - ' +\n                Object.getOwnPropertyNames(this.decoratedCommand)\n        )\n        return this.decoratedCommand.execute()\n    }\n}\n</code></pre>\n<p>Después, usando un <code>UserCaseDecorator</code> especifico qué decoradores quiero aplicar para <strong>todos mis casos de uso</strong>:</p>\n<pre><code class=\"language-typescript\">import { Command } from '../../infraestructure/Command'\nimport { LoggerCommandDecorator } from '../../infraestructure/LoggerCommandDecorator'\nimport { Logger } from '../../infraestructure/Logger'\n\nexport class UseCaseDecorator {\n    private static readonly logger = Logger.create({\n        // eslint-disable-next-line\n        stdout: { error: console.error, info: console.log, warn: console.warn }\n    })\n\n    public static decorate&lt;T&gt;(command: Command&lt;T&gt;) {\n        return new LoggerCommandDecorator&lt;T&gt;(command, UseCaseDecorator.logger)\n    }\n}\n</code></pre>\n<p>Y después en cada Caso de Uso usamos el <code>UseCaseDecorator</code> de esta forma:</p>\n<pre><code class=\"language-typescript\">import { Command } from '../../infraestructure/Command'\nimport { Article, ArticlesRepository } from '../../domain/articles'\nimport { Id } from '../../domain'\nimport { Locale, Translator } from '../../domain/language'\nimport { UseCaseDecorator } from './UseCaseDecorator'\nimport { ArticlesFileRepository } from '../../infraestructure/articles/ArticlesFileRepository'\nimport { FileLoader } from '../../infraestructure/FileLoader'\nimport { TranslationService } from '../../domain/TranslationService'\n\nexport class GetArticle implements Command&lt;Article&gt; {\n    private constructor(\n        private readonly articlesRepository: ArticlesRepository,\n        private readonly id: Id,\n        private readonly locale: Locale\n    ) {}\n\n    public async execute(): Promise&lt;Article&gt; {\n        return this.articlesRepository.findOneByLocale(this.id, this.locale)\n    }\n\n    public static create(context: { id: Id; locale: Locale }) {\n        return UseCaseDecorator.decorate(\n            new GetArticle(\n                new ArticlesFileRepository(\n                    FileLoader.create(),\n                    TranslationService.create(Translator.create())\n                ),\n                context.id,\n                context.locale\n            )\n        )\n    }\n}\n</code></pre>\n<p>Y podríamos crear todos los decaradores que se nos ocurran y usando composición podemos dar más y más comportamiento a nuestros comandos.</p>\n",attributes:{title:"Casos de Uso y el patrón Comando",date:"2019-04-17T00:00:00.000Z",locale:"es",image:"abstract-dark-design.jpg"},vue:{render:"return function render() { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0) }",staticRenderFns:'return [function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"dynamicContent"},[_c(\'p\',[_vm._v("Casos de Uso y comandos. Cómo.")]),_vm._v(" "),_c(\'p\',[_vm._v("El "),_c(\'a\',{attrs:{"href":"https://sourcemaking.com/design_patterns/command"}},[_vm._v("patrón comando")]),_vm._v(" nos ayuda a encapsular peticiones para realizar ciertas operaciones como logs, colas y filtrado.")]),_vm._v(" "),_c(\'p\',[_vm._v("Comenzamos con la interfaz:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-typescript"}},[_vm._v("export interface Command<T> {\\n    execute(): Promise<T>\\n}\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("Ahora podremos ver un comando específico, por ejemplo el que se usa para cargar este mismo artículo.")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-typescript"}},[_vm._v("import { Command } from \'../../infraestructure/Command\'\\nimport { Article, ArticlesRepository } from \'../../domain/articles\'\\nimport { Id } from \'../../domain\'\\nimport { Locale, Translator } from \'../../domain/language\'\\nimport { ArticlesFileRepository } from \'../../infraestructure/articles/ArticlesFileRepository\'\\nimport { FileLoader } from \'../../infraestructure/FileLoader\'\\nimport { TranslationService } from \'../../domain/TranslationService\'\\n\\nexport class GetArticle implements Command<Article> {\\n    private constructor(\\n        private readonly articlesRepository: ArticlesRepository,\\n        private readonly id: Id,\\n        private readonly locale: Locale\\n    ) {}\\n\\n    public async execute(): Promise<Article> {\\n        return this.articlesRepository.findOneByLocale(this.id, this.locale)\\n    }\\n\\n    public static create(context: { id: Id; locale: Locale }) {\\n        return new GetArticle(\\n            new ArticlesFileRepository(\\n                FileLoader.create(),\\n                TranslationService.create(Translator.create())\\n            ),\\n            context.id,\\n            context.locale\\n        )\\n    }\\n}\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("Este comando es responsable de obtener cierto artículo usando un "),_c(\'a\',{attrs:{"href":"http://shawnmc.cool/the-repository-pattern"}},[_vm._v("repositorio")]),_vm._v(", dónde y cómo lo haga es algo que no nos acontece a nosotros, ya que es responsabilidad de otra clase.")]),_vm._v(" "),_c(\'p\',[_vm._v("El comando representa un "),_c(\'a\',{attrs:{"href":"https://en.wikipedia.org/wiki/Use_case"}},[_vm._v("Caso de Uso")]),_vm._v(" de mi aplicación. Ahora mismo solamente necesito recoger el artículo del repositorio pero podría desarrollar una nueva funcionalidad donde se podría gestionar el si el usuario ha leído el artículo ya o si el usuario es PRO y por tanto puede leer todos los artículos en vez de unos pocos.")]),_vm._v(" "),_c(\'p\',[_vm._v("¿Quién construye el comando? Pues quien lo use:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-typescript"}},[_vm._v("const article = await GetArticle.create({\\n    id: \'use-cases-and-commands\',\\n    locale: Locale.EN\\n}).execute()\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("Estoy usando "),_c(\'a\',{attrs:{"href":"https://en.wikipedia.org/wiki/Inversion_of_control"}},[_vm._v("inversion de control")]),_vm._v(" para proveer de las dependencias necesarias para que el case de uso GetArticle funcione. Esto lo hago mediante un función constructura (si fuese muy complejo construir este caso de uso nos crearíamos una "),_c(\'a\',{attrs:{"href":"https://sourcemaking.com/design_patterns/factory_method"}},[_vm._v("factoría")]),_vm._v("):")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-typescript"}},[_vm._v("public static create(context: { id: Id; locale: Locale }) {\\n    return new GetArticle(\\n        new ArticlesFileRepository(\\n          FileLoader.create(),\\n          TranslationService.create(Translator.create())\\n        ),\\n        context.id,\\n        context.locale\\n    )\\n}\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("En este caso estoy pasando de una abstracción (ArticlesRepository) a una concreción (ArticlesFileRepository). Si mañana decido que mis artículos vendrán via API únicamente tendré que cambiar el método factoría.")]),_vm._v(" "),_c(\'p\',[_vm._v("Lo que también es interesante de los comando es que son fáciles de extender. Por ejemplo podemos dejar una traza cada vez que un comando sea ejecutado usando el "),_c(\'a\',{attrs:{"href":"https://sourcemaking.com/design_patterns/decorator"}},[_vm._v("patrón decorador")]),_vm._v(":")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-typescript"}},[_vm._v("import { Command } from \'./Command\'\\nimport { Logger } from \'./Logger\'\\n\\nexport class LoggerCommandDecorator<T> implements Command<T> {\\n    public constructor(\\n        private readonly decoratedCommand: Command<T>,\\n        private readonly logger: Logger\\n    ) {}\\n\\n    public execute(): Promise<T> {\\n        this.logger.log(\\n            (this.decoratedCommand as Object).constructor.name +\\n                \' - \' +\\n                Object.getOwnPropertyNames(this.decoratedCommand)\\n        )\\n        return this.decoratedCommand.execute()\\n    }\\n}\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("Después, usando un "),_c(\'code\',{pre:true},[_vm._v("UserCaseDecorator")]),_vm._v(" especifico qué decoradores quiero aplicar para "),_c(\'strong\',[_vm._v("todos mis casos de uso")]),_vm._v(":")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-typescript"}},[_vm._v("import { Command } from \'../../infraestructure/Command\'\\nimport { LoggerCommandDecorator } from \'../../infraestructure/LoggerCommandDecorator\'\\nimport { Logger } from \'../../infraestructure/Logger\'\\n\\nexport class UseCaseDecorator {\\n    private static readonly logger = Logger.create({\\n        // eslint-disable-next-line\\n        stdout: { error: console.error, info: console.log, warn: console.warn }\\n    })\\n\\n    public static decorate<T>(command: Command<T>) {\\n        return new LoggerCommandDecorator<T>(command, UseCaseDecorator.logger)\\n    }\\n}\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("Y después en cada Caso de Uso usamos el "),_c(\'code\',{pre:true},[_vm._v("UseCaseDecorator")]),_vm._v(" de esta forma:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-typescript"}},[_vm._v("import { Command } from \'../../infraestructure/Command\'\\nimport { Article, ArticlesRepository } from \'../../domain/articles\'\\nimport { Id } from \'../../domain\'\\nimport { Locale, Translator } from \'../../domain/language\'\\nimport { UseCaseDecorator } from \'./UseCaseDecorator\'\\nimport { ArticlesFileRepository } from \'../../infraestructure/articles/ArticlesFileRepository\'\\nimport { FileLoader } from \'../../infraestructure/FileLoader\'\\nimport { TranslationService } from \'../../domain/TranslationService\'\\n\\nexport class GetArticle implements Command<Article> {\\n    private constructor(\\n        private readonly articlesRepository: ArticlesRepository,\\n        private readonly id: Id,\\n        private readonly locale: Locale\\n    ) {}\\n\\n    public async execute(): Promise<Article> {\\n        return this.articlesRepository.findOneByLocale(this.id, this.locale)\\n    }\\n\\n    public static create(context: { id: Id; locale: Locale }) {\\n        return UseCaseDecorator.decorate(\\n            new GetArticle(\\n                new ArticlesFileRepository(\\n                    FileLoader.create(),\\n                    TranslationService.create(Translator.create())\\n                ),\\n                context.id,\\n                context.locale\\n            )\\n        )\\n    }\\n}\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("Y podríamos crear todos los decaradores que se nos ocurran y usando composición podemos dar más y más comportamiento a nuestros comandos.")])]) }]',component:{data:function(){return{templateRender:null}},render:function(e){return this.templateRender?this.templateRender():e("div","Rendering")},created:function(){this.templateRender=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},this.$options.staticRenderFns=[function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"dynamicContent"},[r("p",[e._v("Casos de Uso y comandos. Cómo.")]),e._v(" "),r("p",[e._v("El "),r("a",{attrs:{href:"https://sourcemaking.com/design_patterns/command"}},[e._v("patrón comando")]),e._v(" nos ayuda a encapsular peticiones para realizar ciertas operaciones como logs, colas y filtrado.")]),e._v(" "),r("p",[e._v("Comenzamos con la interfaz:")]),e._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"language-typescript"}},[e._v("export interface Command<T> {\n    execute(): Promise<T>\n}\n")])]),e._v(" "),r("p",[e._v("Ahora podremos ver un comando específico, por ejemplo el que se usa para cargar este mismo artículo.")]),e._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"language-typescript"}},[e._v("import { Command } from '../../infraestructure/Command'\nimport { Article, ArticlesRepository } from '../../domain/articles'\nimport { Id } from '../../domain'\nimport { Locale, Translator } from '../../domain/language'\nimport { ArticlesFileRepository } from '../../infraestructure/articles/ArticlesFileRepository'\nimport { FileLoader } from '../../infraestructure/FileLoader'\nimport { TranslationService } from '../../domain/TranslationService'\n\nexport class GetArticle implements Command<Article> {\n    private constructor(\n        private readonly articlesRepository: ArticlesRepository,\n        private readonly id: Id,\n        private readonly locale: Locale\n    ) {}\n\n    public async execute(): Promise<Article> {\n        return this.articlesRepository.findOneByLocale(this.id, this.locale)\n    }\n\n    public static create(context: { id: Id; locale: Locale }) {\n        return new GetArticle(\n            new ArticlesFileRepository(\n                FileLoader.create(),\n                TranslationService.create(Translator.create())\n            ),\n            context.id,\n            context.locale\n        )\n    }\n}\n")])]),e._v(" "),r("p",[e._v("Este comando es responsable de obtener cierto artículo usando un "),r("a",{attrs:{href:"http://shawnmc.cool/the-repository-pattern"}},[e._v("repositorio")]),e._v(", dónde y cómo lo haga es algo que no nos acontece a nosotros, ya que es responsabilidad de otra clase.")]),e._v(" "),r("p",[e._v("El comando representa un "),r("a",{attrs:{href:"https://en.wikipedia.org/wiki/Use_case"}},[e._v("Caso de Uso")]),e._v(" de mi aplicación. Ahora mismo solamente necesito recoger el artículo del repositorio pero podría desarrollar una nueva funcionalidad donde se podría gestionar el si el usuario ha leído el artículo ya o si el usuario es PRO y por tanto puede leer todos los artículos en vez de unos pocos.")]),e._v(" "),r("p",[e._v("¿Quién construye el comando? Pues quien lo use:")]),e._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"language-typescript"}},[e._v("const article = await GetArticle.create({\n    id: 'use-cases-and-commands',\n    locale: Locale.EN\n}).execute()\n")])]),e._v(" "),r("p",[e._v("Estoy usando "),r("a",{attrs:{href:"https://en.wikipedia.org/wiki/Inversion_of_control"}},[e._v("inversion de control")]),e._v(" para proveer de las dependencias necesarias para que el case de uso GetArticle funcione. Esto lo hago mediante un función constructura (si fuese muy complejo construir este caso de uso nos crearíamos una "),r("a",{attrs:{href:"https://sourcemaking.com/design_patterns/factory_method"}},[e._v("factoría")]),e._v("):")]),e._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"language-typescript"}},[e._v("public static create(context: { id: Id; locale: Locale }) {\n    return new GetArticle(\n        new ArticlesFileRepository(\n          FileLoader.create(),\n          TranslationService.create(Translator.create())\n        ),\n        context.id,\n        context.locale\n    )\n}\n")])]),e._v(" "),r("p",[e._v("En este caso estoy pasando de una abstracción (ArticlesRepository) a una concreción (ArticlesFileRepository). Si mañana decido que mis artículos vendrán via API únicamente tendré que cambiar el método factoría.")]),e._v(" "),r("p",[e._v("Lo que también es interesante de los comando es que son fáciles de extender. Por ejemplo podemos dejar una traza cada vez que un comando sea ejecutado usando el "),r("a",{attrs:{href:"https://sourcemaking.com/design_patterns/decorator"}},[e._v("patrón decorador")]),e._v(":")]),e._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"language-typescript"}},[e._v("import { Command } from './Command'\nimport { Logger } from './Logger'\n\nexport class LoggerCommandDecorator<T> implements Command<T> {\n    public constructor(\n        private readonly decoratedCommand: Command<T>,\n        private readonly logger: Logger\n    ) {}\n\n    public execute(): Promise<T> {\n        this.logger.log(\n            (this.decoratedCommand as Object).constructor.name +\n                ' - ' +\n                Object.getOwnPropertyNames(this.decoratedCommand)\n        )\n        return this.decoratedCommand.execute()\n    }\n}\n")])]),e._v(" "),r("p",[e._v("Después, usando un "),r("code",{pre:!0},[e._v("UserCaseDecorator")]),e._v(" especifico qué decoradores quiero aplicar para "),r("strong",[e._v("todos mis casos de uso")]),e._v(":")]),e._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"language-typescript"}},[e._v("import { Command } from '../../infraestructure/Command'\nimport { LoggerCommandDecorator } from '../../infraestructure/LoggerCommandDecorator'\nimport { Logger } from '../../infraestructure/Logger'\n\nexport class UseCaseDecorator {\n    private static readonly logger = Logger.create({\n        // eslint-disable-next-line\n        stdout: { error: console.error, info: console.log, warn: console.warn }\n    })\n\n    public static decorate<T>(command: Command<T>) {\n        return new LoggerCommandDecorator<T>(command, UseCaseDecorator.logger)\n    }\n}\n")])]),e._v(" "),r("p",[e._v("Y después en cada Caso de Uso usamos el "),r("code",{pre:!0},[e._v("UseCaseDecorator")]),e._v(" de esta forma:")]),e._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"language-typescript"}},[e._v("import { Command } from '../../infraestructure/Command'\nimport { Article, ArticlesRepository } from '../../domain/articles'\nimport { Id } from '../../domain'\nimport { Locale, Translator } from '../../domain/language'\nimport { UseCaseDecorator } from './UseCaseDecorator'\nimport { ArticlesFileRepository } from '../../infraestructure/articles/ArticlesFileRepository'\nimport { FileLoader } from '../../infraestructure/FileLoader'\nimport { TranslationService } from '../../domain/TranslationService'\n\nexport class GetArticle implements Command<Article> {\n    private constructor(\n        private readonly articlesRepository: ArticlesRepository,\n        private readonly id: Id,\n        private readonly locale: Locale\n    ) {}\n\n    public async execute(): Promise<Article> {\n        return this.articlesRepository.findOneByLocale(this.id, this.locale)\n    }\n\n    public static create(context: { id: Id; locale: Locale }) {\n        return UseCaseDecorator.decorate(\n            new GetArticle(\n                new ArticlesFileRepository(\n                    FileLoader.create(),\n                    TranslationService.create(Translator.create())\n                ),\n                context.id,\n                context.locale\n            )\n        )\n    }\n}\n")])]),e._v(" "),r("p",[e._v("Y podríamos crear todos los decaradores que se nos ocurran y usando composición podemos dar más y más comportamiento a nuestros comandos.")])])}]}}}}},"3b8d":function(e,t,r){"use strict";r.d(t,"a",function(){return s});var o=r("795b"),n=r.n(o);function a(e,t,r,o,a,s,i){try{var c=e[s](i),l=c.value}catch(d){return void r(d)}c.done?t(l):n.a.resolve(l).then(o,a)}function s(e){return function(){var t=this,r=arguments;return new n.a(function(o,n){var s=e.apply(t,r);function i(e){a(s,o,n,i,c,"next",e)}function c(e){a(s,o,n,i,c,"throw",e)}i(void 0)})}}},"3c11":function(e,t,r){"use strict";var o=r("63b6"),n=r("584a"),a=r("e53d"),s=r("f201"),i=r("cd78");o(o.P+o.R,"Promise",{finally:function(e){var t=s(this,n.Promise||a.Promise),r="function"==typeof e;return this.then(r?function(r){return i(t,e()).then(function(){return r})}:e,r?function(r){return i(t,e()).then(function(){throw r})}:e)}})},4178:function(e,t,r){var o,n,a,s=r("d864"),i=r("3024"),c=r("32fc"),l=r("1ec9"),d=r("e53d"),u=d.process,m=d.setImmediate,p=d.clearImmediate,v=d.MessageChannel,h=d.Dispatch,f=0,g={},_="onreadystatechange",y=function(){var e=+this;if(g.hasOwnProperty(e)){var t=g[e];delete g[e],t()}},w=function(e){y.call(e.data)};m&&p||(m=function(e){var t=[],r=1;while(arguments.length>r)t.push(arguments[r++]);return g[++f]=function(){i("function"==typeof e?e:Function(e),t)},o(f),f},p=function(e){delete g[e]},"process"==r("6b4c")(u)?o=function(e){u.nextTick(s(y,e,1))}:h&&h.now?o=function(e){h.now(s(y,e,1))}:v?(n=new v,a=n.port2,n.port1.onmessage=w,o=s(a.postMessage,a,1)):d.addEventListener&&"function"==typeof postMessage&&!d.importScripts?(o=function(e){d.postMessage(e+"","*")},d.addEventListener("message",w,!1)):o=_ in l("script")?function(e){c.appendChild(l("script"))[_]=function(){c.removeChild(this),y.call(e)}}:function(e){setTimeout(s(y,e,1),0)}),e.exports={set:m,clear:p}},"41b7":function(e,t,r){e.exports=r.p+"img/abstract-dark-design.e074f6fb.jpg"},"43fc":function(e,t,r){"use strict";var o=r("63b6"),n=r("656e"),a=r("4439");o(o.S,"Promise",{try:function(e){var t=n.f(this),r=a(e);return(r.e?t.reject:t.resolve)(r.v),t.promise}})},4439:function(e,t){e.exports=function(e){try{return{e:!1,v:e()}}catch(t){return{e:!0,v:t}}}},"478c":function(e,t,r){var o={"./en/advanced-javascript-patterns.md":["892f"],"./en/good-practices-vue.md":["2b3a"],"./en/how-to-make-beautiful-software-again.md":["8de8"],"./en/inversion-of-control.md":["8ae8"],"./en/typescript-for-javascripters.md":["670f"],"./es/good-practices-vue.md":["d4ad"]};function n(e){var t=o[e];return t?Promise.all(t.slice(1).map(r.e)).then(function(){var e=t[0];return r.t(e,7)}):Promise.resolve().then(function(){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t})}n.keys=function(){return Object.keys(o)},n.id="478c",e.exports=n},"4ee1":function(e,t,r){var o=r("5168")("iterator"),n=!1;try{var a=[7][o]();a["return"]=function(){n=!0},Array.from(a,function(){throw 2})}catch(s){}e.exports=function(e,t){if(!t&&!n)return!1;var r=!1;try{var a=[7],i=a[o]();i.next=function(){return{done:r=!0}},a[o]=function(){return i},e(a)}catch(s){}return r}},"4f7f":function(e,t,r){"use strict";var o=r("c26b"),n=r("b39a"),a="Set";e.exports=r("e0b8")(a,function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},{add:function(e){return o.def(n(this,a),e=0===e?0:e,e)}},o)},5296:function(e,t,r){var o={"./good-practices-vue.md":"d4ad"};function n(e){var t=a(e);return r(t)}function a(e){var t=o[e];if(!(t+1)){var r=new Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}return t}n.keys=function(){return Object.keys(o)},n.resolve=a,e.exports=n,n.id="5296"},"549b":function(e,t,r){"use strict";var o=r("d864"),n=r("63b6"),a=r("241e"),s=r("b0dc"),i=r("3702"),c=r("b447"),l=r("20fd"),d=r("7cd6");n(n.S+n.F*!r("4ee1")(function(e){Array.from(e)}),"Array",{from:function(e){var t,r,n,u,m=a(e),p="function"==typeof this?this:Array,v=arguments.length,h=v>1?arguments[1]:void 0,f=void 0!==h,g=0,_=d(m);if(f&&(h=o(h,v>2?arguments[2]:void 0,2)),void 0==_||p==Array&&i(_))for(t=c(m.length),r=new p(t);t>g;g++)l(r,g,f?h(m[g],g):m[g]);else for(u=_.call(m),r=new p;!(n=u.next()).done;g++)l(r,g,f?s(u,h,[n.value,g],!0):n.value);return r.length=g,r}})},"54a1":function(e,t,r){r("6c1c"),r("1654"),e.exports=r("95d5")},"55dd":function(e,t,r){"use strict";var o=r("5ca1"),n=r("d8e8"),a=r("4bf8"),s=r("79e5"),i=[].sort,c=[1,2,3];o(o.P+o.F*(s(function(){c.sort(void 0)})||!s(function(){c.sort(null)})||!r("2f21")(i)),"Array",{sort:function(e){return void 0===e?i.call(a(this)):i.call(a(this),n(e))}})},"5e5b":function(e,t,r){e.exports=r.p+"img/art-artistic-canvas.f768d788.jpg"},"656e":function(e,t,r){"use strict";var o=r("79aa");function n(e){var t,r;this.promise=new e(function(e,o){if(void 0!==t||void 0!==r)throw TypeError("Bad Promise constructor");t=e,r=o}),this.resolve=o(t),this.reject=o(r)}e.exports.f=function(e){return new n(e)}},"670f":function(e,t){e.exports={body:"When backend people hear JavaScript, they shudder. When frontend people hear TypeScript, they shudder. Why can't we have the best of both worlds? This talk will heavily demistify the usage of TypeScript and we will show how can we —within a JavaScript context— apply TypeScript to get the best development experience. We'll learn what a type system has to offer us and how we can prevent up to 15% bugs in production. And did I tell you about smart autocompletion when coding? How about capturing errors in compilation time instead of runtime? Better null and undefined handling? Yes, it's possible!\n",html:"<p>When backend people hear JavaScript, they shudder. When frontend people hear TypeScript, they shudder. Why can't we have the best of both worlds? This talk will heavily demistify the usage of TypeScript and we will show how can we —within a JavaScript context— apply TypeScript to get the best development experience. We'll learn what a type system has to offer us and how we can prevent up to 15% bugs in production. And did I tell you about smart autocompletion when coding? How about capturing errors in compilation time instead of runtime? Better null and undefined handling? Yes, it's possible!</p>\n",attributes:{title:"TypeScript for JavaScripters: Less typing and more Typing!",length:45,difficulty:"Beginner",language:"en",topics:["TypeScript","JavaScript"]},vue:{render:"return function render() { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0) }",staticRenderFns:"return [function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"dynamicContent\"},[_c('p',[_vm._v(\"When backend people hear JavaScript, they shudder. When frontend people hear TypeScript, they shudder. Why can't we have the best of both worlds? This talk will heavily demistify the usage of TypeScript and we will show how can we —within a JavaScript context— apply TypeScript to get the best development experience. We'll learn what a type system has to offer us and how we can prevent up to 15% bugs in production. And did I tell you about smart autocompletion when coding? How about capturing errors in compilation time instead of runtime? Better null and undefined handling? Yes, it's possible!\")])]) }]",component:{data:function(){return{templateRender:null}},render:function(e){return this.templateRender?this.templateRender():e("div","Rendering")},created:function(){this.templateRender=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},this.$options.staticRenderFns=[function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"dynamicContent"},[r("p",[e._v("When backend people hear JavaScript, they shudder. When frontend people hear TypeScript, they shudder. Why can't we have the best of both worlds? This talk will heavily demistify the usage of TypeScript and we will show how can we —within a JavaScript context— apply TypeScript to get the best development experience. We'll learn what a type system has to offer us and how we can prevent up to 15% bugs in production. And did I tell you about smart autocompletion when coding? How about capturing errors in compilation time instead of runtime? Better null and undefined handling? Yes, it's possible!")])])}]}}}}},"696e":function(e,t,r){r("c207"),r("1654"),r("6c1c"),r("24c5"),r("3c11"),r("43fc"),e.exports=r("584a").Promise},"6b54":function(e,t,r){"use strict";r("3846");var o=r("cb7c"),n=r("0bfb"),a=r("9e1e"),s="toString",i=/./[s],c=function(e){r("2aba")(RegExp.prototype,s,e,!0)};r("79e5")(function(){return"/a/b"!=i.call({source:"a",flags:"b"})})?c(function(){var e=o(this);return"/".concat(e.source,"/","flags"in e?e.flags:!a&&e instanceof RegExp?n.call(e):void 0)}):i.name!=s&&c(function(){return i.call(this)})},"774e":function(e,t,r){e.exports=r("d2d5")},"795b":function(e,t,r){e.exports=r("696e")},"7c7a":function(e,t){e.exports={body:'Theming a web with custom properties is as easy as it gets as shown in this article.\n\n\x3c!--more--\x3e\n\nTheming is such an important aspect of web development, and even though your app or website might not require different themes we should develop our visual styles such as color, spacing, fonts and animations as if they were to change every day. Why? Because it is what changes most often. If done well, a rebranding, introducing a "dark mode" or adjusting colors will be super easy.\n\n> "we should develop our visual styles such as color, spacing, fonts and animations as if they were to change every day."\n\n## Custom properties\n\nCSS\'s Custom properties are truly a gift. They open up so many possibilities because of their dynamic behaviour. We can create a new custom property in a given element as follows:\n\n```css\n.class {\n    --a-custom-property: 42px;\n}\n```\n\nNow every child of that element has access to this custom property:\n\n```css\n.class-child {\n    margin-bottom: var(--a-custom-property);\n}\n```\n\nWe can even set default values in case the property is not declared:\n\n```css\n.class-child {\n    margin-bottom: var(--a-custom-property, 12px);\n}\n```\n\nAnd what is even more amazing is that we can change dynamically the values of custom properties via CSS or JavaScript:\n\n```css\n@media (max-width: 800px) {\n    .class-child {\n        --a-custom-property: 56px;\n    }\n}\n```\n\n_Note: One would think that we can declare variables for the values of media queries but we can\'t, we\'ll have to wait until [env](https://developer.mozilla.org/en-US/docs/Web/CSS/env) lands in Edge and Internet Explorer to have full support (as of June 2019)._\n\n## Theming\n\nSo, using custom properties how can we theme an app? Well, we first start by creating a `colors.css` file:\n\n```css\n:root {\n    --white-color: hsla(0, 0%, 100%, 0.88);\n    --white-light-color: hsl(0, 0%, 98%);\n    --black-color: hsl(0, 1%, 15%);\n    --dark-blue: hsl(222, 14%, 18%);\n    --gray-color: hsl(150, 2%, 79%);\n    --blue-color: hsl(229, 87%, 44%);\n    --blue-light-color: hsl(206, 68%, 55%);\n    --blue-dark-color: hsl(219, 16%, 16%);\n    --teal-color: hsl(184, 97%, 37%);\n    --orange-color: hsl(32, 100%, 50%);\n}\n```\n\n_Note: The `:root` selector targets the root element of a document._\n\nNow, if the color changes slightly to another one, we should change this file. But, should we still reference this in our components or CSSs? The answer is no, we should have another indirection. Imagine the following case. We declare in every component to use the custom property `--orange-color`. However, a new redesign requires a change of the main color of the app (which is the `--orange-color`) to a blue color. Now, in order to make it work we could do something like this:\n\n```css\n:root {\n    --orange-color: blue;\n}\n```\n\nBut this is so bad at so many levels. For one, we have names that don\'t represent what they stand for and can misguide developers. What if we create a new custom property `--real-blue: darkblue;`? This for sure will ensue madness.\n\nHow can we tackle this problem? The answer lies in a previous paragraph: "requires a change of the main color of the app". What we need to identify is the main color of the app, also known as **primary color**. After that we should identify a **secondary color** or other colors and what do they represent. We can handle all this in a new file called `palette.css`:\n\n```css\n:root {\n    --primary-color: var(--orange-color);\n    --secondary-color: var(--teal-color);\n}\n```\n\nAnother thing I like to do is declare the foreground and background color, this allows me to create in a future a dark theme or a light theme:\n\n```css\n:root {\n    --foreground-color: var(--black-color);\n    --background-color: var(--white-color);\n}\n```\n\nIn order to change to a dark color mode we can just swap the values:\n\n```css\n:root {\n    --foreground-color: var(--white-color);\n    --background-color: var(--black-color);\n}\n```\n\n## Conclusion\n\nTheming as shown in this tutorial can save you a lot of headaches if done well. However we must be precise on what custom properties we assign to our components and try to identify as much as we can business concepts. For example, some error state can be represented today as red, so we should have an `--error-state-color: var(--red-color);` property and if it changes tomorrow we can do it easily `--error-state-color: var(--orange-color);`.\n',html:'<p>Theming a web with custom properties is as easy as it gets as shown in this article.</p>\n\x3c!--more--\x3e\n<p>Theming is such an important aspect of web development, and even though your app or website might not require different themes we should develop our visual styles such as color, spacing, fonts and animations as if they were to change every day. Why? Because it is what changes most often. If done well, a rebranding, introducing a &quot;dark mode&quot; or adjusting colors will be super easy.</p>\n<blockquote>\n<p>&quot;we should develop our visual styles such as color, spacing, fonts and animations as if they were to change every day.&quot;</p>\n</blockquote>\n<h2>Custom properties</h2>\n<p>CSS\'s Custom properties are truly a gift. They open up so many possibilities because of their dynamic behaviour. We can create a new custom property in a given element as follows:</p>\n<pre><code class="language-css">.class {\n    --a-custom-property: 42px;\n}\n</code></pre>\n<p>Now every child of that element has access to this custom property:</p>\n<pre><code class="language-css">.class-child {\n    margin-bottom: var(--a-custom-property);\n}\n</code></pre>\n<p>We can even set default values in case the property is not declared:</p>\n<pre><code class="language-css">.class-child {\n    margin-bottom: var(--a-custom-property, 12px);\n}\n</code></pre>\n<p>And what is even more amazing is that we can change dynamically the values of custom properties via CSS or JavaScript:</p>\n<pre><code class="language-css">@media (max-width: 800px) {\n    .class-child {\n        --a-custom-property: 56px;\n    }\n}\n</code></pre>\n<p><em>Note: One would think that we can declare variables for the values of media queries but we can\'t, we\'ll have to wait until <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/env">env</a> lands in Edge and Internet Explorer to have full support (as of June 2019).</em></p>\n<h2>Theming</h2>\n<p>So, using custom properties how can we theme an app? Well, we first start by creating a <code>colors.css</code> file:</p>\n<pre><code class="language-css">:root {\n    --white-color: hsla(0, 0%, 100%, 0.88);\n    --white-light-color: hsl(0, 0%, 98%);\n    --black-color: hsl(0, 1%, 15%);\n    --dark-blue: hsl(222, 14%, 18%);\n    --gray-color: hsl(150, 2%, 79%);\n    --blue-color: hsl(229, 87%, 44%);\n    --blue-light-color: hsl(206, 68%, 55%);\n    --blue-dark-color: hsl(219, 16%, 16%);\n    --teal-color: hsl(184, 97%, 37%);\n    --orange-color: hsl(32, 100%, 50%);\n}\n</code></pre>\n<p><em>Note: The <code>:root</code> selector targets the root element of a document.</em></p>\n<p>Now, if the color changes slightly to another one, we should change this file. But, should we still reference this in our components or CSSs? The answer is no, we should have another indirection. Imagine the following case. We declare in every component to use the custom property <code>--orange-color</code>. However, a new redesign requires a change of the main color of the app (which is the <code>--orange-color</code>) to a blue color. Now, in order to make it work we could do something like this:</p>\n<pre><code class="language-css">:root {\n    --orange-color: blue;\n}\n</code></pre>\n<p>But this is so bad at so many levels. For one, we have names that don\'t represent what they stand for and can misguide developers. What if we create a new custom property <code>--real-blue: darkblue;</code>? This for sure will ensue madness.</p>\n<p>How can we tackle this problem? The answer lies in a previous paragraph: &quot;requires a change of the main color of the app&quot;. What we need to identify is the main color of the app, also known as <strong>primary color</strong>. After that we should identify a <strong>secondary color</strong> or other colors and what do they represent. We can handle all this in a new file called <code>palette.css</code>:</p>\n<pre><code class="language-css">:root {\n    --primary-color: var(--orange-color);\n    --secondary-color: var(--teal-color);\n}\n</code></pre>\n<p>Another thing I like to do is declare the foreground and background color, this allows me to create in a future a dark theme or a light theme:</p>\n<pre><code class="language-css">:root {\n    --foreground-color: var(--black-color);\n    --background-color: var(--white-color);\n}\n</code></pre>\n<p>In order to change to a dark color mode we can just swap the values:</p>\n<pre><code class="language-css">:root {\n    --foreground-color: var(--white-color);\n    --background-color: var(--black-color);\n}\n</code></pre>\n<h2>Conclusion</h2>\n<p>Theming as shown in this tutorial can save you a lot of headaches if done well. However we must be precise on what custom properties we assign to our components and try to identify as much as we can business concepts. For example, some error state can be represented today as red, so we should have an <code>--error-state-color: var(--red-color);</code> property and if it changes tomorrow we can do it easily <code>--error-state-color: var(--orange-color);</code>.</p>\n',attributes:{title:"Theming",date:"2019-06-06T00:00:00.000Z",locale:"en",image:"art-artistic-canvas.jpg"},vue:{render:"return function render() { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0) }",staticRenderFns:'return [function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"dynamicContent"},[_c(\'p\',[_vm._v("Theming a web with custom properties is as easy as it gets as shown in this article.")]),_vm._v(" "),_c(\'p\',[_vm._v("Theming is such an important aspect of web development, and even though your app or website might not require different themes we should develop our visual styles such as color, spacing, fonts and animations as if they were to change every day. Why? Because it is what changes most often. If done well, a rebranding, introducing a \\"dark mode\\" or adjusting colors will be super easy.")]),_vm._v(" "),_c(\'blockquote\',[_c(\'p\',[_vm._v("\\"we should develop our visual styles such as color, spacing, fonts and animations as if they were to change every day.\\"")])]),_vm._v(" "),_c(\'h2\',[_vm._v("Custom properties")]),_vm._v(" "),_c(\'p\',[_vm._v("CSS\'s Custom properties are truly a gift. They open up so many possibilities because of their dynamic behaviour. We can create a new custom property in a given element as follows:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-css"}},[_vm._v(".class {\\n    --a-custom-property: 42px;\\n}\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("Now every child of that element has access to this custom property:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-css"}},[_vm._v(".class-child {\\n    margin-bottom: var(--a-custom-property);\\n}\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("We can even set default values in case the property is not declared:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-css"}},[_vm._v(".class-child {\\n    margin-bottom: var(--a-custom-property, 12px);\\n}\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("And what is even more amazing is that we can change dynamically the values of custom properties via CSS or JavaScript:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-css"}},[_vm._v("@media (max-width: 800px) {\\n    .class-child {\\n        --a-custom-property: 56px;\\n    }\\n}\\n")])]),_vm._v(" "),_c(\'p\',[_c(\'em\',[_vm._v("Note: One would think that we can declare variables for the values of media queries but we can\'t, we\'ll have to wait until "),_c(\'a\',{attrs:{"href":"https://developer.mozilla.org/en-US/docs/Web/CSS/env"}},[_vm._v("env")]),_vm._v(" lands in Edge and Internet Explorer to have full support (as of June 2019).")])]),_vm._v(" "),_c(\'h2\',[_vm._v("Theming")]),_vm._v(" "),_c(\'p\',[_vm._v("So, using custom properties how can we theme an app? Well, we first start by creating a "),_c(\'code\',{pre:true},[_vm._v("colors.css")]),_vm._v(" file:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-css"}},[_vm._v(":root {\\n    --white-color: hsla(0, 0%, 100%, 0.88);\\n    --white-light-color: hsl(0, 0%, 98%);\\n    --black-color: hsl(0, 1%, 15%);\\n    --dark-blue: hsl(222, 14%, 18%);\\n    --gray-color: hsl(150, 2%, 79%);\\n    --blue-color: hsl(229, 87%, 44%);\\n    --blue-light-color: hsl(206, 68%, 55%);\\n    --blue-dark-color: hsl(219, 16%, 16%);\\n    --teal-color: hsl(184, 97%, 37%);\\n    --orange-color: hsl(32, 100%, 50%);\\n}\\n")])]),_vm._v(" "),_c(\'p\',[_c(\'em\',[_vm._v("Note: The "),_c(\'code\',{pre:true},[_vm._v(":root")]),_vm._v(" selector targets the root element of a document.")])]),_vm._v(" "),_c(\'p\',[_vm._v("Now, if the color changes slightly to another one, we should change this file. But, should we still reference this in our components or CSSs? The answer is no, we should have another indirection. Imagine the following case. We declare in every component to use the custom property "),_c(\'code\',{pre:true},[_vm._v("--orange-color")]),_vm._v(". However, a new redesign requires a change of the main color of the app (which is the "),_c(\'code\',{pre:true},[_vm._v("--orange-color")]),_vm._v(") to a blue color. Now, in order to make it work we could do something like this:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-css"}},[_vm._v(":root {\\n    --orange-color: blue;\\n}\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("But this is so bad at so many levels. For one, we have names that don\'t represent what they stand for and can misguide developers. What if we create a new custom property "),_c(\'code\',{pre:true},[_vm._v("--real-blue: darkblue;")]),_vm._v("? This for sure will ensue madness.")]),_vm._v(" "),_c(\'p\',[_vm._v("How can we tackle this problem? The answer lies in a previous paragraph: \\"requires a change of the main color of the app\\". What we need to identify is the main color of the app, also known as "),_c(\'strong\',[_vm._v("primary color")]),_vm._v(". After that we should identify a "),_c(\'strong\',[_vm._v("secondary color")]),_vm._v(" or other colors and what do they represent. We can handle all this in a new file called "),_c(\'code\',{pre:true},[_vm._v("palette.css")]),_vm._v(":")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-css"}},[_vm._v(":root {\\n    --primary-color: var(--orange-color);\\n    --secondary-color: var(--teal-color);\\n}\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("Another thing I like to do is declare the foreground and background color, this allows me to create in a future a dark theme or a light theme:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-css"}},[_vm._v(":root {\\n    --foreground-color: var(--black-color);\\n    --background-color: var(--white-color);\\n}\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("In order to change to a dark color mode we can just swap the values:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-css"}},[_vm._v(":root {\\n    --foreground-color: var(--white-color);\\n    --background-color: var(--black-color);\\n}\\n")])]),_vm._v(" "),_c(\'h2\',[_vm._v("Conclusion")]),_vm._v(" "),_c(\'p\',[_vm._v("Theming as shown in this tutorial can save you a lot of headaches if done well. However we must be precise on what custom properties we assign to our components and try to identify as much as we can business concepts. For example, some error state can be represented today as red, so we should have an "),_c(\'code\',{pre:true},[_vm._v("--error-state-color: var(--red-color);")]),_vm._v(" property and if it changes tomorrow we can do it easily "),_c(\'code\',{pre:true},[_vm._v("--error-state-color: var(--orange-color);")]),_vm._v(".")])]) }]',component:{data:function(){return{templateRender:null}},render:function(e){return this.templateRender?this.templateRender():e("div","Rendering")},created:function(){this.templateRender=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},this.$options.staticRenderFns=[function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"dynamicContent"},[r("p",[e._v("Theming a web with custom properties is as easy as it gets as shown in this article.")]),e._v(" "),r("p",[e._v('Theming is such an important aspect of web development, and even though your app or website might not require different themes we should develop our visual styles such as color, spacing, fonts and animations as if they were to change every day. Why? Because it is what changes most often. If done well, a rebranding, introducing a "dark mode" or adjusting colors will be super easy.')]),e._v(" "),r("blockquote",[r("p",[e._v('"we should develop our visual styles such as color, spacing, fonts and animations as if they were to change every day."')])]),e._v(" "),r("h2",[e._v("Custom properties")]),e._v(" "),r("p",[e._v("CSS's Custom properties are truly a gift. They open up so many possibilities because of their dynamic behaviour. We can create a new custom property in a given element as follows:")]),e._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"language-css"}},[e._v(".class {\n    --a-custom-property: 42px;\n}\n")])]),e._v(" "),r("p",[e._v("Now every child of that element has access to this custom property:")]),e._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"language-css"}},[e._v(".class-child {\n    margin-bottom: var(--a-custom-property);\n}\n")])]),e._v(" "),r("p",[e._v("We can even set default values in case the property is not declared:")]),e._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"language-css"}},[e._v(".class-child {\n    margin-bottom: var(--a-custom-property, 12px);\n}\n")])]),e._v(" "),r("p",[e._v("And what is even more amazing is that we can change dynamically the values of custom properties via CSS or JavaScript:")]),e._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"language-css"}},[e._v("@media (max-width: 800px) {\n    .class-child {\n        --a-custom-property: 56px;\n    }\n}\n")])]),e._v(" "),r("p",[r("em",[e._v("Note: One would think that we can declare variables for the values of media queries but we can't, we'll have to wait until "),r("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/env"}},[e._v("env")]),e._v(" lands in Edge and Internet Explorer to have full support (as of June 2019).")])]),e._v(" "),r("h2",[e._v("Theming")]),e._v(" "),r("p",[e._v("So, using custom properties how can we theme an app? Well, we first start by creating a "),r("code",{pre:!0},[e._v("colors.css")]),e._v(" file:")]),e._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"language-css"}},[e._v(":root {\n    --white-color: hsla(0, 0%, 100%, 0.88);\n    --white-light-color: hsl(0, 0%, 98%);\n    --black-color: hsl(0, 1%, 15%);\n    --dark-blue: hsl(222, 14%, 18%);\n    --gray-color: hsl(150, 2%, 79%);\n    --blue-color: hsl(229, 87%, 44%);\n    --blue-light-color: hsl(206, 68%, 55%);\n    --blue-dark-color: hsl(219, 16%, 16%);\n    --teal-color: hsl(184, 97%, 37%);\n    --orange-color: hsl(32, 100%, 50%);\n}\n")])]),e._v(" "),r("p",[r("em",[e._v("Note: The "),r("code",{pre:!0},[e._v(":root")]),e._v(" selector targets the root element of a document.")])]),e._v(" "),r("p",[e._v("Now, if the color changes slightly to another one, we should change this file. But, should we still reference this in our components or CSSs? The answer is no, we should have another indirection. Imagine the following case. We declare in every component to use the custom property "),r("code",{pre:!0},[e._v("--orange-color")]),e._v(". However, a new redesign requires a change of the main color of the app (which is the "),r("code",{pre:!0},[e._v("--orange-color")]),e._v(") to a blue color. Now, in order to make it work we could do something like this:")]),e._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"language-css"}},[e._v(":root {\n    --orange-color: blue;\n}\n")])]),e._v(" "),r("p",[e._v("But this is so bad at so many levels. For one, we have names that don't represent what they stand for and can misguide developers. What if we create a new custom property "),r("code",{pre:!0},[e._v("--real-blue: darkblue;")]),e._v("? This for sure will ensue madness.")]),e._v(" "),r("p",[e._v('How can we tackle this problem? The answer lies in a previous paragraph: "requires a change of the main color of the app". What we need to identify is the main color of the app, also known as '),r("strong",[e._v("primary color")]),e._v(". After that we should identify a "),r("strong",[e._v("secondary color")]),e._v(" or other colors and what do they represent. We can handle all this in a new file called "),r("code",{pre:!0},[e._v("palette.css")]),e._v(":")]),e._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"language-css"}},[e._v(":root {\n    --primary-color: var(--orange-color);\n    --secondary-color: var(--teal-color);\n}\n")])]),e._v(" "),r("p",[e._v("Another thing I like to do is declare the foreground and background color, this allows me to create in a future a dark theme or a light theme:")]),e._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"language-css"}},[e._v(":root {\n    --foreground-color: var(--black-color);\n    --background-color: var(--white-color);\n}\n")])]),e._v(" "),r("p",[e._v("In order to change to a dark color mode we can just swap the values:")]),e._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"language-css"}},[e._v(":root {\n    --foreground-color: var(--white-color);\n    --background-color: var(--black-color);\n}\n")])]),e._v(" "),r("h2",[e._v("Conclusion")]),e._v(" "),r("p",[e._v("Theming as shown in this tutorial can save you a lot of headaches if done well. However we must be precise on what custom properties we assign to our components and try to identify as much as we can business concepts. For example, some error state can be represented today as red, so we should have an "),r("code",{pre:!0},[e._v("--error-state-color: var(--red-color);")]),e._v(" property and if it changes tomorrow we can do it easily "),r("code",{pre:!0},[e._v("--error-state-color: var(--orange-color);")]),e._v(".")])])}]}}}}},"7f7f":function(e,t,r){var o=r("86cc").f,n=Function.prototype,a=/^\s*function ([^ (]*)/,s="name";s in n||r("9e1e")&&o(n,s,{configurable:!0,get:function(){try{return(""+this).match(a)[1]}catch(e){return""}}})},"892f":function(e,t){e.exports={body:"When you tell people you code in JavaScript they usually look down on you. This talk will give you the tools to enlighten those heretics. We'll be entering the world of **design patterns** applied to JavaScript, looking through some of the cutting edge properties of ES6 such as **Proxies** and **default function parameter expressions**, dealing with **objects** and even some examples of **functional programming**. This talk is not allowed for cardiacs.\n",html:"<p>When you tell people you code in JavaScript they usually look down on you. This talk will give you the tools to enlighten those heretics. We'll be entering the world of <strong>design patterns</strong> applied to JavaScript, looking through some of the cutting edge properties of ES6 such as <strong>Proxies</strong> and <strong>default function parameter expressions</strong>, dealing with <strong>objects</strong> and even some examples of <strong>functional programming</strong>. This talk is not allowed for cardiacs.</p>\n",attributes:{title:"Advanced JavaScript Patterns",length:45,difficulty:"Advanced",language:"en",topics:["Proxies","JavaScript"]},vue:{render:"return function render() { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0) }",staticRenderFns:'return [function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"dynamicContent"},[_c(\'p\',[_vm._v("When you tell people you code in JavaScript they usually look down on you. This talk will give you the tools to enlighten those heretics. We\'ll be entering the world of "),_c(\'strong\',[_vm._v("design patterns")]),_vm._v(" applied to JavaScript, looking through some of the cutting edge properties of ES6 such as "),_c(\'strong\',[_vm._v("Proxies")]),_vm._v(" and "),_c(\'strong\',[_vm._v("default function parameter expressions")]),_vm._v(", dealing with "),_c(\'strong\',[_vm._v("objects")]),_vm._v(" and even some examples of "),_c(\'strong\',[_vm._v("functional programming")]),_vm._v(". This talk is not allowed for cardiacs.")])]) }]',component:{data:function(){return{templateRender:null}},render:function(e){return this.templateRender?this.templateRender():e("div","Rendering")},created:function(){this.templateRender=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},this.$options.staticRenderFns=[function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"dynamicContent"},[r("p",[e._v("When you tell people you code in JavaScript they usually look down on you. This talk will give you the tools to enlighten those heretics. We'll be entering the world of "),r("strong",[e._v("design patterns")]),e._v(" applied to JavaScript, looking through some of the cutting edge properties of ES6 such as "),r("strong",[e._v("Proxies")]),e._v(" and "),r("strong",[e._v("default function parameter expressions")]),e._v(", dealing with "),r("strong",[e._v("objects")]),e._v(" and even some examples of "),r("strong",[e._v("functional programming")]),e._v(". This talk is not allowed for cardiacs.")])])}]}}}}},"898a":function(e,t,r){var o={"./use-cases-and-commands.md":"391e"};function n(e){var t=a(e);return r(t)}function a(e){var t=o[e];if(!(t+1)){var r=new Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}return t}n.keys=function(){return Object.keys(o)},n.resolve=a,e.exports=n,n.id="898a"},"8ae8":function(e,t){e.exports={body:"Inversion of Control (IoC) is a powerful mechanism popularized by **Robert C. Martin** and **Martin Fowler** which makes your code more **reusable**, **extensible** and **testable**. It's tied with one of the **SOLID** principles and following it will give you back **absolute control over your code**.\n",html:"<p>Inversion of Control (IoC) is a powerful mechanism popularized by <strong>Robert C. Martin</strong> and <strong>Martin Fowler</strong> which makes your code more <strong>reusable</strong>, <strong>extensible</strong> and <strong>testable</strong>. It's tied with one of the <strong>SOLID</strong> principles and following it will give you back <strong>absolute control over your code</strong>.</p>\n",attributes:{title:"Inversion of Control to Take Back Control",length:45,difficulty:"Advanced",language:"en",topics:["Software Architecture","TypeScript"]},vue:{render:"return function render() { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0) }",staticRenderFns:'return [function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"dynamicContent"},[_c(\'p\',[_vm._v("Inversion of Control (IoC) is a powerful mechanism popularized by "),_c(\'strong\',[_vm._v("Robert C. Martin")]),_vm._v(" and "),_c(\'strong\',[_vm._v("Martin Fowler")]),_vm._v(" which makes your code more "),_c(\'strong\',[_vm._v("reusable")]),_vm._v(", "),_c(\'strong\',[_vm._v("extensible")]),_vm._v(" and "),_c(\'strong\',[_vm._v("testable")]),_vm._v(". It\'s tied with one of the "),_c(\'strong\',[_vm._v("SOLID")]),_vm._v(" principles and following it will give you back "),_c(\'strong\',[_vm._v("absolute control over your code")]),_vm._v(".")])]) }]',component:{data:function(){return{templateRender:null}},render:function(e){return this.templateRender?this.templateRender():e("div","Rendering")},created:function(){this.templateRender=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},this.$options.staticRenderFns=[function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"dynamicContent"},[r("p",[e._v("Inversion of Control (IoC) is a powerful mechanism popularized by "),r("strong",[e._v("Robert C. Martin")]),e._v(" and "),r("strong",[e._v("Martin Fowler")]),e._v(" which makes your code more "),r("strong",[e._v("reusable")]),e._v(", "),r("strong",[e._v("extensible")]),e._v(" and "),r("strong",[e._v("testable")]),e._v(". It's tied with one of the "),r("strong",[e._v("SOLID")]),e._v(" principles and following it will give you back "),r("strong",[e._v("absolute control over your code")]),e._v(".")])])}]}}}}},"8de8":function(e,t){e.exports={body:"The frontend world has always been known by its **volatile nature**, however we don't make any effort to abstract ourselves from all that. We should build **robust** and **long-lived** software. In this talk we'll see how to tackle common problems in the frontend world using **TypeScript**, **React** and several **design patterns**. We'll see how we'll make our software _open to change_ while not trying to _guess the future_. Also, we'll appreciate how following the **SOLID principles** of our app will be very easy to test and change. Are you ready for this journey on _beautiful_ software?\n",html:"<p>The frontend world has always been known by its <strong>volatile nature</strong>, however we don't make any effort to abstract ourselves from all that. We should build <strong>robust</strong> and <strong>long-lived</strong> software. In this talk we'll see how to tackle common problems in the frontend world using <strong>TypeScript</strong>, <strong>React</strong> and several <strong>design patterns</strong>. We'll see how we'll make our software <em>open to change</em> while not trying to <em>guess the future</em>. Also, we'll appreciate how following the <strong>SOLID principles</strong> of our app will be very easy to test and change. Are you ready for this journey on <em>beautiful</em> software?</p>\n",attributes:{title:"How To Make Beautiful Software Again: Frontend Design Patterns",length:40,difficulty:"Advanced",language:"en",topics:["Proxies","JavaScript"]},vue:{render:"return function render() { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0) }",staticRenderFns:'return [function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"dynamicContent"},[_c(\'p\',[_vm._v("The frontend world has always been known by its "),_c(\'strong\',[_vm._v("volatile nature")]),_vm._v(", however we don\'t make any effort to abstract ourselves from all that. We should build "),_c(\'strong\',[_vm._v("robust")]),_vm._v(" and "),_c(\'strong\',[_vm._v("long-lived")]),_vm._v(" software. In this talk we\'ll see how to tackle common problems in the frontend world using "),_c(\'strong\',[_vm._v("TypeScript")]),_vm._v(", "),_c(\'strong\',[_vm._v("React")]),_vm._v(" and several "),_c(\'strong\',[_vm._v("design patterns")]),_vm._v(". We\'ll see how we\'ll make our software "),_c(\'em\',[_vm._v("open to change")]),_vm._v(" while not trying to "),_c(\'em\',[_vm._v("guess the future")]),_vm._v(". Also, we\'ll appreciate how following the "),_c(\'strong\',[_vm._v("SOLID principles")]),_vm._v(" of our app will be very easy to test and change. Are you ready for this journey on "),_c(\'em\',[_vm._v("beautiful")]),_vm._v(" software?")])]) }]',component:{data:function(){return{templateRender:null}},render:function(e){return this.templateRender?this.templateRender():e("div","Rendering")},created:function(){this.templateRender=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},this.$options.staticRenderFns=[function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"dynamicContent"},[r("p",[e._v("The frontend world has always been known by its "),r("strong",[e._v("volatile nature")]),e._v(", however we don't make any effort to abstract ourselves from all that. We should build "),r("strong",[e._v("robust")]),e._v(" and "),r("strong",[e._v("long-lived")]),e._v(" software. In this talk we'll see how to tackle common problems in the frontend world using "),r("strong",[e._v("TypeScript")]),e._v(", "),r("strong",[e._v("React")]),e._v(" and several "),r("strong",[e._v("design patterns")]),e._v(". We'll see how we'll make our software "),r("em",[e._v("open to change")]),e._v(" while not trying to "),r("em",[e._v("guess the future")]),e._v(". Also, we'll appreciate how following the "),r("strong",[e._v("SOLID principles")]),e._v(" of our app will be very easy to test and change. Are you ready for this journey on "),r("em",[e._v("beautiful")]),e._v(" software?")])])}]}}}}},"95d5":function(e,t,r){var o=r("40c3"),n=r("5168")("iterator"),a=r("481b");e.exports=r("584a").isIterable=function(e){var t=Object(e);return void 0!==t[n]||"@@iterator"in t||a.hasOwnProperty(o(t))}},"96cf":function(e,t,r){var o=function(e){"use strict";var t,r=Object.prototype,o=r.hasOwnProperty,n="function"===typeof Symbol?Symbol:{},a=n.iterator||"@@iterator",s=n.asyncIterator||"@@asyncIterator",i=n.toStringTag||"@@toStringTag";function c(e,t,r,o){var n=t&&t.prototype instanceof h?t:h,a=Object.create(n.prototype),s=new R(o||[]);return a._invoke=k(e,r,s),a}function l(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(o){return{type:"throw",arg:o}}}e.wrap=c;var d="suspendedStart",u="suspendedYield",m="executing",p="completed",v={};function h(){}function f(){}function g(){}var _={};_[a]=function(){return this};var y=Object.getPrototypeOf,w=y&&y(y(S([])));w&&w!==r&&o.call(w,a)&&(_=w);var b=g.prototype=h.prototype=Object.create(_);function C(e){["next","throw","return"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function x(e){function t(r,n,a,s){var i=l(e[r],e,n);if("throw"!==i.type){var c=i.arg,d=c.value;return d&&"object"===typeof d&&o.call(d,"__await")?Promise.resolve(d.__await).then(function(e){t("next",e,a,s)},function(e){t("throw",e,a,s)}):Promise.resolve(d).then(function(e){c.value=e,a(c)},function(e){return t("throw",e,a,s)})}s(i.arg)}var r;function n(e,o){function n(){return new Promise(function(r,n){t(e,o,r,n)})}return r=r?r.then(n,n):n()}this._invoke=n}function k(e,t,r){var o=d;return function(n,a){if(o===m)throw new Error("Generator is already running");if(o===p){if("throw"===n)throw a;return I()}r.method=n,r.arg=a;while(1){var s=r.delegate;if(s){var i=A(s,r);if(i){if(i===v)continue;return i}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=p,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=m;var c=l(e,t,r);if("normal"===c.type){if(o=r.done?p:u,c.arg===v)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(o=p,r.method="throw",r.arg=c.arg)}}}function A(e,r){var o=e.iterator[r.method];if(o===t){if(r.delegate=null,"throw"===r.method){if(e.iterator["return"]&&(r.method="return",r.arg=t,A(e,r),"throw"===r.method))return v;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var n=l(o,e.iterator,r.arg);if("throw"===n.type)return r.method="throw",r.arg=n.arg,r.delegate=null,v;var a=n.arg;return a?a.done?(r[e.resultName]=a.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,v):a:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,v)}function T(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function L(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function R(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(T,this),this.reset(!0)}function S(e){if(e){var r=e[a];if(r)return r.call(e);if("function"===typeof e.next)return e;if(!isNaN(e.length)){var n=-1,s=function r(){while(++n<e.length)if(o.call(e,n))return r.value=e[n],r.done=!1,r;return r.value=t,r.done=!0,r};return s.next=s}}return{next:I}}function I(){return{value:t,done:!0}}return f.prototype=b.constructor=g,g.constructor=f,g[i]=f.displayName="GeneratorFunction",e.isGeneratorFunction=function(e){var t="function"===typeof e&&e.constructor;return!!t&&(t===f||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,g):(e.__proto__=g,i in e||(e[i]="GeneratorFunction")),e.prototype=Object.create(b),e},e.awrap=function(e){return{__await:e}},C(x.prototype),x.prototype[s]=function(){return this},e.AsyncIterator=x,e.async=function(t,r,o,n){var a=new x(c(t,r,o,n));return e.isGeneratorFunction(r)?a:a.next().then(function(e){return e.done?e.value:a.next()})},C(b),b[i]="Generator",b[a]=function(){return this},b.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function r(){while(t.length){var o=t.pop();if(o in e)return r.value=o,r.done=!1,r}return r.done=!0,r}},e.values=S,R.prototype={constructor:R,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(L),!e)for(var r in this)"t"===r.charAt(0)&&o.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0],t=e.completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function n(o,n){return i.type="throw",i.arg=e,r.next=o,n&&(r.method="next",r.arg=t),!!n}for(var a=this.tryEntries.length-1;a>=0;--a){var s=this.tryEntries[a],i=s.completion;if("root"===s.tryLoc)return n("end");if(s.tryLoc<=this.prev){var c=o.call(s,"catchLoc"),l=o.call(s,"finallyLoc");if(c&&l){if(this.prev<s.catchLoc)return n(s.catchLoc,!0);if(this.prev<s.finallyLoc)return n(s.finallyLoc)}else if(c){if(this.prev<s.catchLoc)return n(s.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<s.finallyLoc)return n(s.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&o.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var a=n;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var s=a?a.completion:{};return s.type=e,s.arg=t,a?(this.method="next",this.next=a.finallyLoc,v):this.complete(s)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),L(r),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var o=r.completion;if("throw"===o.type){var n=o.arg;L(r)}return n}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,o){return this.delegate={iterator:S(e),resultName:r,nextLoc:o},"next"===this.method&&(this.arg=t),v}},e}(e.exports);try{regeneratorRuntime=o}catch(n){Function("r","regeneratorRuntime = r")(o)}},9788:function(e,t,r){"use strict";r("96cf");var o,n=r("3b8d"),a=r("d225"),s=r("b0b4"),i=r("f798"),c=(r("ac6a"),r("5df3"),r("6b54"),function(){function e(t,r,o,n,s,i,c,l){Object(a["a"])(this,e),this.id=t,this.title=r,this.abstract=o,this.length=n,this.difficulty=s,this.language=i,this.topics=c,this.references=l}return Object(s["a"])(e,null,[{key:"create",value:function(t){return new e(t.id,t.title,t.abstract,t.length,t.difficulty,t.language,t.topics,t.references)}}]),e}());r("1bb4");(function(e){e[e["SPANISH"]=0]="SPANISH",e[e["ENGLISH"]=1]="ENGLISH"})(o||(o={}));r("c655");var l=r("2a3d"),d=(r("82e5"),r("9cd5")),u=r("309a"),m=function(){function e(t,r){Object(a["a"])(this,e),this.fileLoader=t,this.translationService=r}return Object(s["a"])(e,[{key:"findOneByLocale",value:function(){var e=Object(n["a"])(regeneratorRuntime.mark(function e(t,o){var n,a;return regeneratorRuntime.wrap(function(e){while(1)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,r("478c")("./".concat(this.translationService.toString(o),"/").concat(t.value,".md"));case 3:n=e.sent,e.next=12;break;case 6:return e.prev=6,e.t0=e["catch"](0),a=this.translationService.toString(i["a"].DEFAULT),e.next=11,r("478c")("./".concat(a,"/").concat(t.value,".md"));case 11:n=e.sent;case 12:return e.abrupt("return",c.create({id:t,language:n.attributes.language,title:n.attributes.title,abstract:d["b"].fromValue(n.body),references:[],length:l["a"].fromMinutes(n.attributes.length),difficulty:u["a"].create().toDifficulty(n.attributes.difficulty),topics:[]}));case 13:case"end":return e.stop()}},e,this,[[0,6]])}));function t(t,r){return e.apply(this,arguments)}return t}()},{key:"findAllByLocale",value:function(){var e=Object(n["a"])(regeneratorRuntime.mark(function e(t){var r,o=this;return regeneratorRuntime.wrap(function(e){while(1)switch(e.prev=e.next){case 0:return r=this.fileLoader.loadTalks().map(function(e){return e.substr(2,e.length).substr(0,e.length-5)}),e.abrupt("return",Promise.all(r.map(function(e){return o.findOneByLocale(d["a"].fromValue(e),t)})));case 2:case"end":return e.stop()}},e,this)}));function t(t){return e.apply(this,arguments)}return t}()}]),e}(),p=r("a745"),v=r.n(p);function h(e){if(v()(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}var f=r("774e"),g=r.n(f),_=r("c8bb"),y=r.n(_);function w(e){if(y()(Object(e))||"[object Arguments]"===Object.prototype.toString.call(e))return g()(e)}function b(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function C(e){return h(e)||w(e)||b()}r("4f7f"),r("1c4c");var x=function(){function e(){Object(a["a"])(this,e)}return Object(s["a"])(e,[{key:"loadArticles",value:function(){var e=r("898a").keys(),t=r("a78d").keys();return Array.from(new Set([].concat(C(e),C(t))))}},{key:"loadTalks",value:function(){var e=r("5296").keys(),t=r("cd3d").keys();return Array.from(new Set([].concat(C(e),C(t))))}}],[{key:"create",value:function(){return new e}}]),e}(),k=r("3611"),A=(r("7f7f"),function(){function e(t,r){Object(a["a"])(this,e),this.decoratedCommand=t,this.logger=r}return Object(s["a"])(e,[{key:"execute",value:function(){return this.logger.log(this.decoratedCommand.constructor.name+" - "+Object.getOwnPropertyNames(this.decoratedCommand)),this.decoratedCommand.execute()}}]),e}()),T=r("2008"),L=function(){function e(t){Object(a["a"])(this,e),this.stdout=t}return Object(s["a"])(e,[{key:"log",value:function(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1];this.stdout.info("[".concat(T["a"].fromNow(),"] ").concat(e))}}],[{key:"create",value:function(t){return new e(t.stdout)}}]),e}(),R=function(){function e(){Object(a["a"])(this,e)}return Object(s["a"])(e,null,[{key:"decorate",value:function(t){return new A(t,e.logger)}}]),e}();R.logger=L.create({stdout:{error:console.error,info:console.log,warn:console.warn}});var S=function(){function e(t,r){Object(a["a"])(this,e),this.talksRepository=t,this.locale=r}return Object(s["a"])(e,[{key:"execute",value:function(){var e=Object(n["a"])(regeneratorRuntime.mark(function e(){return regeneratorRuntime.wrap(function(e){while(1)switch(e.prev=e.next){case 0:return e.abrupt("return",this.talksRepository.findAllByLocale(this.locale));case 1:case"end":return e.stop()}},e,this)}));function t(){return e.apply(this,arguments)}return t}()}],[{key:"create",value:function(t){return R.decorate(new e(new m(x.create(),k["a"].create(i["c"].create())),t.locale))}}]),e}(),I=r("9f8e"),F=function(){function e(t,r){Object(a["a"])(this,e),this.fileLoader=t,this.translationService=r}return Object(s["a"])(e,[{key:"findOneByLocale",value:function(){var e=Object(n["a"])(regeneratorRuntime.mark(function e(t,o){var n,a;return regeneratorRuntime.wrap(function(e){while(1)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,r("b979")("./".concat(this.translationService.toString(o),"/").concat(t.value,".md"));case 3:n=e.sent,e.next=12;break;case 6:return e.prev=6,e.t0=e["catch"](0),a=this.translationService.toString(i["a"].DEFAULT),e.next=11,r("b979")("./".concat(a,"/").concat(t.value,".md"));case 11:n=e.sent;case 12:return e.abrupt("return",I["a"].create({id:t,body:I["c"].fromValue(n.body),date:T["a"].fromString(n.attributes.date),title:n.attributes.title,locale:this.translationService.toLocale(n.attributes.locale),image:r("3886")("./".concat(n.attributes.image))}));case 13:case"end":return e.stop()}},e,this,[[0,6]])}));function t(t,r){return e.apply(this,arguments)}return t}()},{key:"findAllByLocale",value:function(){var e=Object(n["a"])(regeneratorRuntime.mark(function e(t){var r,o=this;return regeneratorRuntime.wrap(function(e){while(1)switch(e.prev=e.next){case 0:return r=this.fileLoader.loadArticles().map(function(e){return e.substr(2,e.length).substr(0,e.length-5)}),e.abrupt("return",Promise.all(r.map(function(e){return o.findOneByLocale(I["b"].fromValue(e),t)})));case 2:case"end":return e.stop()}},e,this)}));function t(t){return e.apply(this,arguments)}return t}()}]),e}(),E=function(){function e(t,r,o){Object(a["a"])(this,e),this.articlesRepository=t,this.id=r,this.locale=o}return Object(s["a"])(e,[{key:"execute",value:function(){var e=Object(n["a"])(regeneratorRuntime.mark(function e(){return regeneratorRuntime.wrap(function(e){while(1)switch(e.prev=e.next){case 0:return e.abrupt("return",this.articlesRepository.findOneByLocale(this.id,this.locale));case 1:case"end":return e.stop()}},e,this)}));function t(){return e.apply(this,arguments)}return t}()}],[{key:"create",value:function(t){return R.decorate(new e(new F(x.create(),k["a"].create(i["c"].create())),t.id,t.locale))}}]),e}(),O=(r("55dd"),function(){function e(t,r){Object(a["a"])(this,e),this.articlesRepository=t,this.locale=r}return Object(s["a"])(e,[{key:"execute",value:function(){var e=Object(n["a"])(regeneratorRuntime.mark(function e(){var t;return regeneratorRuntime.wrap(function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,this.articlesRepository.findAllByLocale(this.locale);case 2:return t=e.sent,e.abrupt("return",t.slice().sort(function(e,t){return t.date<e.date?-1:1}));case 4:case"end":return e.stop()}},e,this)}));function t(){return e.apply(this,arguments)}return t}()}],[{key:"create",value:function(t){return R.decorate(new e(new F(x.create(),k["a"].create(i["c"].create())),t.locale))}}]),e}());r.d(t,"c",function(){return S}),r.d(t,"b",function(){return E}),r.d(t,"a",function(){return O})},9818:function(e,t){e.exports={body:"Use cases and commands. How to.\n\n\x3c!--more--\x3e\n\nThe [command pattern](https://sourcemaking.com/design_patterns/command) helps us encapsulate requests in order to perform certain operations, like logging, queuing and filtering.\n\nWe start with the interface:\n\n```typescript\nexport interface Command<T> {\n    execute(): Promise<T>\n}\n```\n\nAnd then we can look at a specific command, for example the one used to retrieve this article:\n\n```typescript\nimport { Command } from '../../infraestructure/Command'\nimport { Article, ArticlesRepository } from '../../domain/articles'\nimport { Id } from '../../domain'\nimport { Locale, Translator } from '../../domain/language'\nimport { ArticlesFileRepository } from '../../infraestructure/articles/ArticlesFileRepository'\nimport { FileLoader } from '../../infraestructure/FileLoader'\nimport { TranslationService } from '../../domain/TranslationService'\n\nexport class GetArticle implements Command<Article> {\n    private constructor(\n        private readonly articlesRepository: ArticlesRepository,\n        private readonly id: Id,\n        private readonly locale: Locale\n    ) {}\n\n    public async execute(): Promise<Article> {\n        return this.articlesRepository.findOneByLocale(this.id, this.locale)\n    }\n\n    public static create(context: { id: Id; locale: Locale }) {\n        return new GetArticle(\n            new ArticlesFileRepository(\n                FileLoader.create(),\n                TranslationService.create(Translator.create())\n            ),\n            context.id,\n            context.locale\n        )\n    }\n}\n```\n\nThis command is responsible for obtaining a certain article using a [repository](http://shawnmc.cool/the-repository-pattern), where and how do we get this data we neither know nor care, that's responsibility of another class.\n\nThis command represents a [Use Case](https://en.wikipedia.org/wiki/Use_case) of my application. Right now it only needs to get the article from the repository but in the feature it could handle if a user has read the article, or if the user is a PRO user and then can read all articles instead of a subset of articles or anything we'd like.\n\nWho builds the command? Whoever uses it:\n\n```typescript\nconst article = await GetArticle.create({\n    id: 'use-cases-and-commands',\n    locale: Locale.EN\n}).execute()\n```\n\nI'm using [inversion of control](https://en.wikipedia.org/wiki/Inversion_of_control) to provide the dependencies needed for the GetArticle use case to work. In this case I'm going from an abstraction (ArticlesRepository) to a concreation (ArticlesFileRepository). If tomorrow I decide to serve the articles via API I would only need to change the factory.\n\nWhat is also interesting about commands is that they are easily augmented. For example we can log when a command is executed without touching any commands using the [Decorator Pattern](https://sourcemaking.com/design_patterns/decorator):\n\n```typescript\nimport { Command } from './Command'\nimport { Logger } from './Logger'\n\nexport class LoggerCommandDecorator<T> implements Command<T> {\n    public constructor(\n        private readonly decoratedCommand: Command<T>,\n        private readonly logger: Logger\n    ) {}\n\n    public execute(): Promise<T> {\n        this.logger.log(\n            (this.decoratedCommand as Object).constructor.name +\n                ' - ' +\n                Object.getOwnPropertyNames(this.decoratedCommand)\n        )\n        return this.decoratedCommand.execute()\n    }\n}\n```\n\nThen, using a `UserCaseDecorator` I specify which decorators I want for **all my use cases**:\n\n```typescript\nimport { Command } from '../../infraestructure/Command'\nimport { LoggerCommandDecorator } from '../../infraestructure/LoggerCommandDecorator'\nimport { Logger } from '../../infraestructure/Logger'\n\nexport class UseCaseDecorator {\n    private static readonly logger = Logger.create({\n        // eslint-disable-next-line\n        stdout: { error: console.error, info: console.log, warn: console.warn }\n    })\n\n    public static decorate<T>(command: Command<T>) {\n        return new LoggerCommandDecorator<T>(command, UseCaseDecorator.logger)\n    }\n}\n```\n\nAnd then in each use case we use the `UseCaseDecorator` like so:\n\n```typescript\nimport { Command } from '../../infraestructure/Command'\nimport { Article, ArticlesRepository } from '../../domain/articles'\nimport { Id } from '../../domain'\nimport { Locale, Translator } from '../../domain/language'\nimport { UseCaseDecorator } from './UseCaseDecorator'\nimport { ArticlesFileRepository } from '../../infraestructure/articles/ArticlesFileRepository'\nimport { FileLoader } from '../../infraestructure/FileLoader'\nimport { TranslationService } from '../../domain/TranslationService'\n\nexport class GetArticle implements Command<Article> {\n    private constructor(\n        private readonly articlesRepository: ArticlesRepository,\n        private readonly id: Id,\n        private readonly locale: Locale\n    ) {}\n\n    public async execute(): Promise<Article> {\n        return this.articlesRepository.findOneByLocale(this.id, this.locale)\n    }\n\n    public static create(context: { id: Id; locale: Locale }) {\n        return UseCaseDecorator.decorate(\n            new GetArticle(\n                new ArticlesFileRepository(\n                    FileLoader.create(),\n                    TranslationService.create(Translator.create())\n                ),\n                context.id,\n                context.locale\n            )\n        )\n    }\n}\n```\n\nAnd we could create as many decorators as we want and use composition to give more behaviour to our commands.\n",html:"<p>Use cases and commands. How to.</p>\n\x3c!--more--\x3e\n<p>The <a href=\"https://sourcemaking.com/design_patterns/command\">command pattern</a> helps us encapsulate requests in order to perform certain operations, like logging, queuing and filtering.</p>\n<p>We start with the interface:</p>\n<pre><code class=\"language-typescript\">export interface Command&lt;T&gt; {\n    execute(): Promise&lt;T&gt;\n}\n</code></pre>\n<p>And then we can look at a specific command, for example the one used to retrieve this article:</p>\n<pre><code class=\"language-typescript\">import { Command } from '../../infraestructure/Command'\nimport { Article, ArticlesRepository } from '../../domain/articles'\nimport { Id } from '../../domain'\nimport { Locale, Translator } from '../../domain/language'\nimport { ArticlesFileRepository } from '../../infraestructure/articles/ArticlesFileRepository'\nimport { FileLoader } from '../../infraestructure/FileLoader'\nimport { TranslationService } from '../../domain/TranslationService'\n\nexport class GetArticle implements Command&lt;Article&gt; {\n    private constructor(\n        private readonly articlesRepository: ArticlesRepository,\n        private readonly id: Id,\n        private readonly locale: Locale\n    ) {}\n\n    public async execute(): Promise&lt;Article&gt; {\n        return this.articlesRepository.findOneByLocale(this.id, this.locale)\n    }\n\n    public static create(context: { id: Id; locale: Locale }) {\n        return new GetArticle(\n            new ArticlesFileRepository(\n                FileLoader.create(),\n                TranslationService.create(Translator.create())\n            ),\n            context.id,\n            context.locale\n        )\n    }\n}\n</code></pre>\n<p>This command is responsible for obtaining a certain article using a <a href=\"http://shawnmc.cool/the-repository-pattern\">repository</a>, where and how do we get this data we neither know nor care, that's responsibility of another class.</p>\n<p>This command represents a <a href=\"https://en.wikipedia.org/wiki/Use_case\">Use Case</a> of my application. Right now it only needs to get the article from the repository but in the feature it could handle if a user has read the article, or if the user is a PRO user and then can read all articles instead of a subset of articles or anything we'd like.</p>\n<p>Who builds the command? Whoever uses it:</p>\n<pre><code class=\"language-typescript\">const article = await GetArticle.create({\n    id: 'use-cases-and-commands',\n    locale: Locale.EN\n}).execute()\n</code></pre>\n<p>I'm using <a href=\"https://en.wikipedia.org/wiki/Inversion_of_control\">inversion of control</a> to provide the dependencies needed for the GetArticle use case to work. In this case I'm going from an abstraction (ArticlesRepository) to a concreation (ArticlesFileRepository). If tomorrow I decide to serve the articles via API I would only need to change the factory.</p>\n<p>What is also interesting about commands is that they are easily augmented. For example we can log when a command is executed without touching any commands using the <a href=\"https://sourcemaking.com/design_patterns/decorator\">Decorator Pattern</a>:</p>\n<pre><code class=\"language-typescript\">import { Command } from './Command'\nimport { Logger } from './Logger'\n\nexport class LoggerCommandDecorator&lt;T&gt; implements Command&lt;T&gt; {\n    public constructor(\n        private readonly decoratedCommand: Command&lt;T&gt;,\n        private readonly logger: Logger\n    ) {}\n\n    public execute(): Promise&lt;T&gt; {\n        this.logger.log(\n            (this.decoratedCommand as Object).constructor.name +\n                ' - ' +\n                Object.getOwnPropertyNames(this.decoratedCommand)\n        )\n        return this.decoratedCommand.execute()\n    }\n}\n</code></pre>\n<p>Then, using a <code>UserCaseDecorator</code> I specify which decorators I want for <strong>all my use cases</strong>:</p>\n<pre><code class=\"language-typescript\">import { Command } from '../../infraestructure/Command'\nimport { LoggerCommandDecorator } from '../../infraestructure/LoggerCommandDecorator'\nimport { Logger } from '../../infraestructure/Logger'\n\nexport class UseCaseDecorator {\n    private static readonly logger = Logger.create({\n        // eslint-disable-next-line\n        stdout: { error: console.error, info: console.log, warn: console.warn }\n    })\n\n    public static decorate&lt;T&gt;(command: Command&lt;T&gt;) {\n        return new LoggerCommandDecorator&lt;T&gt;(command, UseCaseDecorator.logger)\n    }\n}\n</code></pre>\n<p>And then in each use case we use the <code>UseCaseDecorator</code> like so:</p>\n<pre><code class=\"language-typescript\">import { Command } from '../../infraestructure/Command'\nimport { Article, ArticlesRepository } from '../../domain/articles'\nimport { Id } from '../../domain'\nimport { Locale, Translator } from '../../domain/language'\nimport { UseCaseDecorator } from './UseCaseDecorator'\nimport { ArticlesFileRepository } from '../../infraestructure/articles/ArticlesFileRepository'\nimport { FileLoader } from '../../infraestructure/FileLoader'\nimport { TranslationService } from '../../domain/TranslationService'\n\nexport class GetArticle implements Command&lt;Article&gt; {\n    private constructor(\n        private readonly articlesRepository: ArticlesRepository,\n        private readonly id: Id,\n        private readonly locale: Locale\n    ) {}\n\n    public async execute(): Promise&lt;Article&gt; {\n        return this.articlesRepository.findOneByLocale(this.id, this.locale)\n    }\n\n    public static create(context: { id: Id; locale: Locale }) {\n        return UseCaseDecorator.decorate(\n            new GetArticle(\n                new ArticlesFileRepository(\n                    FileLoader.create(),\n                    TranslationService.create(Translator.create())\n                ),\n                context.id,\n                context.locale\n            )\n        )\n    }\n}\n</code></pre>\n<p>And we could create as many decorators as we want and use composition to give more behaviour to our commands.</p>\n",attributes:{title:"Use Cases and Command Pattern",date:"2019-04-17T00:00:00.000Z",locale:"en",image:"abstract-dark-design.jpg"},vue:{render:"return function render() { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0) }",staticRenderFns:'return [function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"dynamicContent"},[_c(\'p\',[_vm._v("Use cases and commands. How to.")]),_vm._v(" "),_c(\'p\',[_vm._v("The "),_c(\'a\',{attrs:{"href":"https://sourcemaking.com/design_patterns/command"}},[_vm._v("command pattern")]),_vm._v(" helps us encapsulate requests in order to perform certain operations, like logging, queuing and filtering.")]),_vm._v(" "),_c(\'p\',[_vm._v("We start with the interface:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-typescript"}},[_vm._v("export interface Command<T> {\\n    execute(): Promise<T>\\n}\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("And then we can look at a specific command, for example the one used to retrieve this article:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-typescript"}},[_vm._v("import { Command } from \'../../infraestructure/Command\'\\nimport { Article, ArticlesRepository } from \'../../domain/articles\'\\nimport { Id } from \'../../domain\'\\nimport { Locale, Translator } from \'../../domain/language\'\\nimport { ArticlesFileRepository } from \'../../infraestructure/articles/ArticlesFileRepository\'\\nimport { FileLoader } from \'../../infraestructure/FileLoader\'\\nimport { TranslationService } from \'../../domain/TranslationService\'\\n\\nexport class GetArticle implements Command<Article> {\\n    private constructor(\\n        private readonly articlesRepository: ArticlesRepository,\\n        private readonly id: Id,\\n        private readonly locale: Locale\\n    ) {}\\n\\n    public async execute(): Promise<Article> {\\n        return this.articlesRepository.findOneByLocale(this.id, this.locale)\\n    }\\n\\n    public static create(context: { id: Id; locale: Locale }) {\\n        return new GetArticle(\\n            new ArticlesFileRepository(\\n                FileLoader.create(),\\n                TranslationService.create(Translator.create())\\n            ),\\n            context.id,\\n            context.locale\\n        )\\n    }\\n}\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("This command is responsible for obtaining a certain article using a "),_c(\'a\',{attrs:{"href":"http://shawnmc.cool/the-repository-pattern"}},[_vm._v("repository")]),_vm._v(", where and how do we get this data we neither know nor care, that\'s responsibility of another class.")]),_vm._v(" "),_c(\'p\',[_vm._v("This command represents a "),_c(\'a\',{attrs:{"href":"https://en.wikipedia.org/wiki/Use_case"}},[_vm._v("Use Case")]),_vm._v(" of my application. Right now it only needs to get the article from the repository but in the feature it could handle if a user has read the article, or if the user is a PRO user and then can read all articles instead of a subset of articles or anything we\'d like.")]),_vm._v(" "),_c(\'p\',[_vm._v("Who builds the command? Whoever uses it:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-typescript"}},[_vm._v("const article = await GetArticle.create({\\n    id: \'use-cases-and-commands\',\\n    locale: Locale.EN\\n}).execute()\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("I\'m using "),_c(\'a\',{attrs:{"href":"https://en.wikipedia.org/wiki/Inversion_of_control"}},[_vm._v("inversion of control")]),_vm._v(" to provide the dependencies needed for the GetArticle use case to work. In this case I\'m going from an abstraction (ArticlesRepository) to a concreation (ArticlesFileRepository). If tomorrow I decide to serve the articles via API I would only need to change the factory.")]),_vm._v(" "),_c(\'p\',[_vm._v("What is also interesting about commands is that they are easily augmented. For example we can log when a command is executed without touching any commands using the "),_c(\'a\',{attrs:{"href":"https://sourcemaking.com/design_patterns/decorator"}},[_vm._v("Decorator Pattern")]),_vm._v(":")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-typescript"}},[_vm._v("import { Command } from \'./Command\'\\nimport { Logger } from \'./Logger\'\\n\\nexport class LoggerCommandDecorator<T> implements Command<T> {\\n    public constructor(\\n        private readonly decoratedCommand: Command<T>,\\n        private readonly logger: Logger\\n    ) {}\\n\\n    public execute(): Promise<T> {\\n        this.logger.log(\\n            (this.decoratedCommand as Object).constructor.name +\\n                \' - \' +\\n                Object.getOwnPropertyNames(this.decoratedCommand)\\n        )\\n        return this.decoratedCommand.execute()\\n    }\\n}\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("Then, using a "),_c(\'code\',{pre:true},[_vm._v("UserCaseDecorator")]),_vm._v(" I specify which decorators I want for "),_c(\'strong\',[_vm._v("all my use cases")]),_vm._v(":")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-typescript"}},[_vm._v("import { Command } from \'../../infraestructure/Command\'\\nimport { LoggerCommandDecorator } from \'../../infraestructure/LoggerCommandDecorator\'\\nimport { Logger } from \'../../infraestructure/Logger\'\\n\\nexport class UseCaseDecorator {\\n    private static readonly logger = Logger.create({\\n        // eslint-disable-next-line\\n        stdout: { error: console.error, info: console.log, warn: console.warn }\\n    })\\n\\n    public static decorate<T>(command: Command<T>) {\\n        return new LoggerCommandDecorator<T>(command, UseCaseDecorator.logger)\\n    }\\n}\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("And then in each use case we use the "),_c(\'code\',{pre:true},[_vm._v("UseCaseDecorator")]),_vm._v(" like so:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-typescript"}},[_vm._v("import { Command } from \'../../infraestructure/Command\'\\nimport { Article, ArticlesRepository } from \'../../domain/articles\'\\nimport { Id } from \'../../domain\'\\nimport { Locale, Translator } from \'../../domain/language\'\\nimport { UseCaseDecorator } from \'./UseCaseDecorator\'\\nimport { ArticlesFileRepository } from \'../../infraestructure/articles/ArticlesFileRepository\'\\nimport { FileLoader } from \'../../infraestructure/FileLoader\'\\nimport { TranslationService } from \'../../domain/TranslationService\'\\n\\nexport class GetArticle implements Command<Article> {\\n    private constructor(\\n        private readonly articlesRepository: ArticlesRepository,\\n        private readonly id: Id,\\n        private readonly locale: Locale\\n    ) {}\\n\\n    public async execute(): Promise<Article> {\\n        return this.articlesRepository.findOneByLocale(this.id, this.locale)\\n    }\\n\\n    public static create(context: { id: Id; locale: Locale }) {\\n        return UseCaseDecorator.decorate(\\n            new GetArticle(\\n                new ArticlesFileRepository(\\n                    FileLoader.create(),\\n                    TranslationService.create(Translator.create())\\n                ),\\n                context.id,\\n                context.locale\\n            )\\n        )\\n    }\\n}\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("And we could create as many decorators as we want and use composition to give more behaviour to our commands.")])]) }]',component:{data:function(){return{templateRender:null}},render:function(e){return this.templateRender?this.templateRender():e("div","Rendering")},created:function(){this.templateRender=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},this.$options.staticRenderFns=[function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"dynamicContent"},[r("p",[e._v("Use cases and commands. How to.")]),e._v(" "),r("p",[e._v("The "),r("a",{attrs:{href:"https://sourcemaking.com/design_patterns/command"}},[e._v("command pattern")]),e._v(" helps us encapsulate requests in order to perform certain operations, like logging, queuing and filtering.")]),e._v(" "),r("p",[e._v("We start with the interface:")]),e._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"language-typescript"}},[e._v("export interface Command<T> {\n    execute(): Promise<T>\n}\n")])]),e._v(" "),r("p",[e._v("And then we can look at a specific command, for example the one used to retrieve this article:")]),e._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"language-typescript"}},[e._v("import { Command } from '../../infraestructure/Command'\nimport { Article, ArticlesRepository } from '../../domain/articles'\nimport { Id } from '../../domain'\nimport { Locale, Translator } from '../../domain/language'\nimport { ArticlesFileRepository } from '../../infraestructure/articles/ArticlesFileRepository'\nimport { FileLoader } from '../../infraestructure/FileLoader'\nimport { TranslationService } from '../../domain/TranslationService'\n\nexport class GetArticle implements Command<Article> {\n    private constructor(\n        private readonly articlesRepository: ArticlesRepository,\n        private readonly id: Id,\n        private readonly locale: Locale\n    ) {}\n\n    public async execute(): Promise<Article> {\n        return this.articlesRepository.findOneByLocale(this.id, this.locale)\n    }\n\n    public static create(context: { id: Id; locale: Locale }) {\n        return new GetArticle(\n            new ArticlesFileRepository(\n                FileLoader.create(),\n                TranslationService.create(Translator.create())\n            ),\n            context.id,\n            context.locale\n        )\n    }\n}\n")])]),e._v(" "),r("p",[e._v("This command is responsible for obtaining a certain article using a "),r("a",{attrs:{href:"http://shawnmc.cool/the-repository-pattern"}},[e._v("repository")]),e._v(", where and how do we get this data we neither know nor care, that's responsibility of another class.")]),e._v(" "),r("p",[e._v("This command represents a "),r("a",{attrs:{href:"https://en.wikipedia.org/wiki/Use_case"}},[e._v("Use Case")]),e._v(" of my application. Right now it only needs to get the article from the repository but in the feature it could handle if a user has read the article, or if the user is a PRO user and then can read all articles instead of a subset of articles or anything we'd like.")]),e._v(" "),r("p",[e._v("Who builds the command? Whoever uses it:")]),e._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"language-typescript"}},[e._v("const article = await GetArticle.create({\n    id: 'use-cases-and-commands',\n    locale: Locale.EN\n}).execute()\n")])]),e._v(" "),r("p",[e._v("I'm using "),r("a",{attrs:{href:"https://en.wikipedia.org/wiki/Inversion_of_control"}},[e._v("inversion of control")]),e._v(" to provide the dependencies needed for the GetArticle use case to work. In this case I'm going from an abstraction (ArticlesRepository) to a concreation (ArticlesFileRepository). If tomorrow I decide to serve the articles via API I would only need to change the factory.")]),e._v(" "),r("p",[e._v("What is also interesting about commands is that they are easily augmented. For example we can log when a command is executed without touching any commands using the "),r("a",{attrs:{href:"https://sourcemaking.com/design_patterns/decorator"}},[e._v("Decorator Pattern")]),e._v(":")]),e._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"language-typescript"}},[e._v("import { Command } from './Command'\nimport { Logger } from './Logger'\n\nexport class LoggerCommandDecorator<T> implements Command<T> {\n    public constructor(\n        private readonly decoratedCommand: Command<T>,\n        private readonly logger: Logger\n    ) {}\n\n    public execute(): Promise<T> {\n        this.logger.log(\n            (this.decoratedCommand as Object).constructor.name +\n                ' - ' +\n                Object.getOwnPropertyNames(this.decoratedCommand)\n        )\n        return this.decoratedCommand.execute()\n    }\n}\n")])]),e._v(" "),r("p",[e._v("Then, using a "),r("code",{pre:!0},[e._v("UserCaseDecorator")]),e._v(" I specify which decorators I want for "),r("strong",[e._v("all my use cases")]),e._v(":")]),e._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"language-typescript"}},[e._v("import { Command } from '../../infraestructure/Command'\nimport { LoggerCommandDecorator } from '../../infraestructure/LoggerCommandDecorator'\nimport { Logger } from '../../infraestructure/Logger'\n\nexport class UseCaseDecorator {\n    private static readonly logger = Logger.create({\n        // eslint-disable-next-line\n        stdout: { error: console.error, info: console.log, warn: console.warn }\n    })\n\n    public static decorate<T>(command: Command<T>) {\n        return new LoggerCommandDecorator<T>(command, UseCaseDecorator.logger)\n    }\n}\n")])]),e._v(" "),r("p",[e._v("And then in each use case we use the "),r("code",{pre:!0},[e._v("UseCaseDecorator")]),e._v(" like so:")]),e._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"language-typescript"}},[e._v("import { Command } from '../../infraestructure/Command'\nimport { Article, ArticlesRepository } from '../../domain/articles'\nimport { Id } from '../../domain'\nimport { Locale, Translator } from '../../domain/language'\nimport { UseCaseDecorator } from './UseCaseDecorator'\nimport { ArticlesFileRepository } from '../../infraestructure/articles/ArticlesFileRepository'\nimport { FileLoader } from '../../infraestructure/FileLoader'\nimport { TranslationService } from '../../domain/TranslationService'\n\nexport class GetArticle implements Command<Article> {\n    private constructor(\n        private readonly articlesRepository: ArticlesRepository,\n        private readonly id: Id,\n        private readonly locale: Locale\n    ) {}\n\n    public async execute(): Promise<Article> {\n        return this.articlesRepository.findOneByLocale(this.id, this.locale)\n    }\n\n    public static create(context: { id: Id; locale: Locale }) {\n        return UseCaseDecorator.decorate(\n            new GetArticle(\n                new ArticlesFileRepository(\n                    FileLoader.create(),\n                    TranslationService.create(Translator.create())\n                ),\n                context.id,\n                context.locale\n            )\n        )\n    }\n}\n")])]),e._v(" "),r("p",[e._v("And we could create as many decorators as we want and use composition to give more behaviour to our commands.")])])}]}}}}},a745:function(e,t,r){e.exports=r("f410")},a78d:function(e,t,r){var o={"./theming.md":"7c7a","./use-cases-and-commands.md":"9818"};function n(e){var t=a(e);return r(t)}function a(e){var t=o[e];if(!(t+1)){var r=new Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}return t}n.keys=function(){return Object.keys(o)},n.resolve=a,e.exports=n,n.id="a78d"},aba2:function(e,t,r){var o=r("e53d"),n=r("4178").set,a=o.MutationObserver||o.WebKitMutationObserver,s=o.process,i=o.Promise,c="process"==r("6b4c")(s);e.exports=function(){var e,t,r,l=function(){var o,n;c&&(o=s.domain)&&o.exit();while(e){n=e.fn,e=e.next;try{n()}catch(a){throw e?r():t=void 0,a}}t=void 0,o&&o.enter()};if(c)r=function(){s.nextTick(l)};else if(!a||o.navigator&&o.navigator.standalone)if(i&&i.resolve){var d=i.resolve(void 0);r=function(){d.then(l)}}else r=function(){n.call(o,l)};else{var u=!0,m=document.createTextNode("");new a(l).observe(m,{characterData:!0}),r=function(){m.data=u=!u}}return function(o){var n={fn:o,next:void 0};t&&(t.next=n),e||(e=n,r()),t=n}}},b979:function(e,t,r){var o={"./en/theming.md":["7c7a"],"./en/use-cases-and-commands.md":["9818"],"./es/use-cases-and-commands.md":["391e"]};function n(e){var t=o[e];return t?Promise.all(t.slice(1).map(r.e)).then(function(){var e=t[0];return r.t(e,7)}):Promise.resolve().then(function(){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t})}n.keys=function(){return Object.keys(o)},n.id="b979",e.exports=n},bc13:function(e,t,r){var o=r("e53d"),n=o.navigator;e.exports=n&&n.userAgent||""},c655:function(e,t,r){"use strict";var o;r.d(t,"a",function(){return o}),function(e){e[e["EASY"]=0]="EASY",e[e["INTERMEDIATE"]=1]="INTERMEDIATE",e[e["ADVANCED"]=2]="ADVANCED"}(o||(o={}))},c8bb:function(e,t,r){e.exports=r("54a1")},cd3d:function(e,t,r){var o={"./advanced-javascript-patterns.md":"892f","./good-practices-vue.md":"2b3a","./how-to-make-beautiful-software-again.md":"8de8","./inversion-of-control.md":"8ae8","./typescript-for-javascripters.md":"670f"};function n(e){var t=a(e);return r(t)}function a(e){var t=o[e];if(!(t+1)){var r=new Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}return t}n.keys=function(){return Object.keys(o)},n.resolve=a,e.exports=n,n.id="cd3d"},cd78:function(e,t,r){var o=r("e4ae"),n=r("f772"),a=r("656e");e.exports=function(e,t){if(o(e),n(t)&&t.constructor===e)return t;var r=a.f(e),s=r.resolve;return s(t),r.promise}},d2d5:function(e,t,r){r("1654"),r("549b"),e.exports=r("584a").Array.from},d4ad:function(e,t){e.exports={body:"Vue parece ser el framework del momento, pero... ¿es a prueba de testing, inyección de dependencias, separación de responsabilidades, composición y otras buenas prácticas? En esta charla veremos cómo le podemos sacar el máximo partido a Vue para que nuestro software sea más robusto, fácil de testear y fácilmente modificable.\n",html:"<p>Vue parece ser el framework del momento, pero... ¿es a prueba de testing, inyección de dependencias, separación de responsabilidades, composición y otras buenas prácticas? En esta charla veremos cómo le podemos sacar el máximo partido a Vue para que nuestro software sea más robusto, fácil de testear y fácilmente modificable.</p>\n",attributes:{title:"(Vue)nas prácticas",length:40,difficulty:"Intermediate",language:"es",topics:["Vue","JavaScript","TypeScript"]},vue:{render:"return function render() { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0) }",staticRenderFns:"return [function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"dynamicContent\"},[_c('p',[_vm._v(\"Vue parece ser el framework del momento, pero... ¿es a prueba de testing, inyección de dependencias, separación de responsabilidades, composición y otras buenas prácticas? En esta charla veremos cómo le podemos sacar el máximo partido a Vue para que nuestro software sea más robusto, fácil de testear y fácilmente modificable.\")])]) }]",component:{data:function(){return{templateRender:null}},render:function(e){return this.templateRender?this.templateRender():e("div","Rendering")},created:function(){this.templateRender=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},this.$options.staticRenderFns=[function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"dynamicContent"},[r("p",[e._v("Vue parece ser el framework del momento, pero... ¿es a prueba de testing, inyección de dependencias, separación de responsabilidades, composición y otras buenas prácticas? En esta charla veremos cómo le podemos sacar el máximo partido a Vue para que nuestro software sea más robusto, fácil de testear y fácilmente modificable.")])])}]}}}}},f1ae:function(e,t,r){"use strict";var o=r("86cc"),n=r("4630");e.exports=function(e,t,r){t in e?o.f(e,t,n(0,r)):e[t]=r}},f201:function(e,t,r){var o=r("e4ae"),n=r("79aa"),a=r("5168")("species");e.exports=function(e,t){var r,s=o(e).constructor;return void 0===s||void 0==(r=o(s)[a])?t:n(r)}},f410:function(e,t,r){r("1af6"),e.exports=r("584a").Array.isArray}}]);
//# sourceMappingURL=article~articles~home~talks.a2b0470a.js.map